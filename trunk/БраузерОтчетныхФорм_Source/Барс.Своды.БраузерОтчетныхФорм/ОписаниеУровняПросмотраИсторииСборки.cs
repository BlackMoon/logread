namespace Барс.Своды.БраузерОтчетныхФорм
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using Барс;
    using Барс.Интерфейс;
    using Барс.Своды.ОтчетнаяФорма;
    using Барс.Ядро;

    public class ОписаниеУровняПросмотраИсторииСборки
    {
        private ИсторияСборкиИтоговыхОтчетов история;
        private string кодУчреждения;
        private Dictionary<string, ОписаниеУровняПросмотраИсторииСборки> кэшПодчиненныхОписаний;
        private Dictionary<string, ТаблицаДанных> кэшТаблицИсточников;
        private ОписаниеУровняПросмотраИсторииСборки родитель;
        private List<ЭлементПросмотраЗаписиИсторииСборки> списокЭлементов;
        private string столбецПостроения;
        private ТипПостроенияИсторииСборки типПостроения;

        public event СобытиеОписанияУровняИстории ПередФормированиемЭлементов;

        public event СобытиеОписанияУровняИстории ПослеФормированияЭлементов;

        public event СобытиеОписанияУровняИстории ФормированиеЭлементов;

        public ОписаниеУровняПросмотраИсторииСборки(ЗаписьИсторииСборкиИтоговыхОтчетов ЗаписьИстории) : this(ЗаписьИстории.ИдентификаторДанныхИсточника, ЗаписьИстории.НаименованиеФормыИсточника, ЗаписьИстории.НаименованиеУчрежденияИсточника, ЗаписьИстории.КодТаблицыИсточника, ЗаписьИстории.КодСтрокиИсточника)
        {
        }

        public ОписаниеУровняПросмотраИсторииСборки(Guid идентификаторДанных, string форма, string учреждение, string кодТаблицы, string кодСтроки) : this(идентификаторДанных, форма, учреждение, кодТаблицы, кодСтроки, "")
        {
        }

        public ОписаниеУровняПросмотраИсторииСборки(Guid идентификаторДанных, string форма, string учреждение, string кодТаблицы, string кодСтроки, string кодСтрокиСтарый)
        {
            this.родитель = null;
            this.кэшТаблицИсточников = null;
            this.кэшПодчиненныхОписаний = null;
            this.столбецПостроения = string.Empty;
            this.типПостроения = ТипПостроенияИсторииСборки.ПоСтолбцу;
            this.списокЭлементов = null;
            this.история = ИсторияСборкиИтоговыхОтчетов.ЗагрузитьИсторию(идентификаторДанных, кодТаблицы, кодСтроки, true, true);
            if (!((this.история.Count != 0) || string.IsNullOrEmpty(кодСтрокиСтарый)))
            {
                this.история = ИсторияСборкиИтоговыхОтчетов.ЗагрузитьИсторию(идентификаторДанных, кодТаблицы, кодСтрокиСтарый, true, true);
            }
            this.история.НаименованиеФормыПриемника = форма;
            this.история.НаименованиеУчрежденияПриемника = учреждение;
            this.кодУчреждения = this.история.КодУчрежденияПриемника;
        }

        private void ЗагрузитьТаблицуИсточника(ЗаписьИсторииСборкиИтоговыхОтчетов записьИстории)
        {
            if (((this.кэшТаблицИсточников != null) && (записьИстории != null)) && !(записьИстории.ИдентификаторДанныхИсточника == Guid.Empty))
            {
                string key = записьИстории.ИдентификаторДанныхИсточника.ToString() + записьИстории.КодТаблицыИсточника;
                if (!this.кэшТаблицИсточников.ContainsKey(key))
                {
                    ТаблицаДанных данных = this.ПолучитьТаблицуДанныхИсточника(записьИстории);
                    if (данных != null)
                    {
                        данных.СформироватьХешСловарь();
                        this.КэшТаблицИсточников.Add(key, данных);
                    }
                }
            }
        }

        private void ЗагрузитьТаблицуПриемника(ЗаписьИсторииСборкиИтоговыхОтчетов записьИстории)
        {
            if (((this.кэшТаблицИсточников != null) && (записьИстории != null)) && !(записьИстории.ИдентификаторДанныхПриемника == Guid.Empty))
            {
                string key = записьИстории.ИдентификаторДанныхПриемника.ToString() + записьИстории.КодТаблицыПриемника;
                if (!this.кэшТаблицИсточников.ContainsKey(key))
                {
                    ТаблицаДанных данных = this.ПолучитьТаблицуДанныхПриемника(записьИстории);
                    if (данных != null)
                    {
                        данных.СформироватьХешСловарь();
                        this.КэшТаблицИсточников.Add(key, данных);
                    }
                }
            }
        }

        public void Очистить()
        {
            if (this.ИсторияЗагружена)
            {
                this.история.Clear();
            }
            if (this.ЭлементыЗагружены)
            {
                this.списокЭлементов.Clear();
            }
        }

        public object ПолучитьЗначениеПоляИсточника(ЭлементПросмотраЗаписиИсторииСборки элемент, string кодСтолбца)
        {
            object obj2;
            if ((this.кэшТаблицИсточников == null) || (this.кэшТаблицИсточников.Count == 0))
            {
                return null;
            }
            try
            {
                Guid guid = элемент.ЗаписьИстории.ИдентификаторДанныхИсточника;
                if (guid == Guid.Empty)
                {
                    return null;
                }
                ТаблицаДанных данных = null;
                string key = guid.ToString() + элемент.Таблица;
                if (this.кэшТаблицИсточников.ContainsKey(key))
                {
                    данных = this.кэшТаблицИсточников[key];
                }
                if (данных == null)
                {
                    return null;
                }
                if (!данных.МатрицаЗначений.СодержитИндекс(элемент.КодСтрокиИсточника, кодСтолбца))
                {
                    return null;
                }
                obj2 = данных.МатрицаЗначений[элемент.КодСтрокиИсточника, кодСтолбца];
            }
            catch
            {
            }
            return obj2;
        }

        public object ПолучитьЗначениеПоляТекущейТаблицы(ЭлементПросмотраЗаписиИсторииСборки элемент, string кодСтолбца)
        {
            object obj2;
            if ((this.кэшТаблицИсточников == null) || (this.кэшТаблицИсточников.Count == 0))
            {
                return null;
            }
            try
            {
                Guid guid = элемент.ЗаписьИстории.ИдентификаторДанныхПриемника;
                if (guid == Guid.Empty)
                {
                    return null;
                }
                ТаблицаДанных данных = null;
                string key = guid.ToString() + элемент.Таблица;
                if (this.кэшТаблицИсточников.ContainsKey(key))
                {
                    данных = this.кэшТаблицИсточников[key];
                }
                if (данных == null)
                {
                    return null;
                }
                if (!данных.МатрицаЗначений.СодержитИндекс(элемент.КодСтрокиПриемника, кодСтолбца))
                {
                    return null;
                }
                obj2 = данных.МатрицаЗначений[элемент.КодСтрокиПриемника, кодСтолбца];
            }
            catch
            {
            }
            return obj2;
        }

        public ОписаниеУровняПросмотраИсторииСборки ПолучитьОписаниеПоЭлементу(int номерЭлемента)
        {
            ЭлементПросмотраЗаписиИсторииСборки сборки = this.ПолучитьЭлементПросмотра(номерЭлемента);
            if (сборки == null)
            {
                return null;
            }
            return this.ПолучитьОписаниеПоЭлементу(сборки);
        }

        public ОписаниеУровняПросмотраИсторииСборки ПолучитьОписаниеПоЭлементу(ЭлементПросмотраЗаписиИсторииСборки элемент)
        {
            if ((!this.ОписаниеЗагружено || (элемент == null)) || (this.кэшПодчиненныхОписаний == null))
            {
                return null;
            }
            ЗаписьИсторииСборкиИтоговыхОтчетов отчетов = элемент.ЗаписьИстории;
            Guid guid1 = отчетов.ИдентификаторДанныхИсточника;
            if (отчетов.ИдентификаторДанныхИсточника == Guid.Empty)
            {
                return null;
            }
            if (this.кэшПодчиненныхОписаний.ContainsKey(отчетов.КлючИсточникаСтрокой))
            {
                return this.кэшПодчиненныхОписаний[отчетов.КлючИсточникаСтрокой];
            }
            ОписаниеУровняПросмотраИсторииСборки сборки = new ОписаниеУровняПросмотраИсторииСборки(отчетов);
            if (!сборки.ИсторияЗагружена)
            {
                сборки.Очистить();
                сборки = null;
            }
            else
            {
                сборки.ТипПостроения = this.типПостроения;
                сборки.СтолбецПостроения = this.СтолбецПостроения;
                сборки.КэшТаблицИсточников = this.КэшТаблицИсточников;
                сборки.КэшПодчиненныхОписаний = this.КэшПодчиненныхОписаний;
                сборки.Родитель = this;
                if (!сборки.ПостроитьОписание())
                {
                    сборки.Очистить();
                    сборки = null;
                }
            }
            this.кэшПодчиненныхОписаний.Add(отчетов.КлючИсточникаСтрокой, сборки);
            return сборки;
        }

        private ТаблицаДанных ПолучитьТаблицуДанныхИсточника(ЗаписьИсторииСборкиИтоговыхОтчетов записьИстории)
        {
            ТаблицаДанных данных = null;
            try
            {
                Выборка<ХранимыеДанныеФормы> выборка = new Выборка<ХранимыеДанныеФормы>();
                выборка.Запрос.ДобавитьУсловиеОтбора("Идентификатор", записьИстории.ИдентификаторДанныхИсточника);
                выборка.ЗагрузитьПолностью();
                if (выборка.Count > 0)
                {
                    ХранимыеДанныеФормы формы = выборка[0];
                    формы.Загрузить();
                    ОтчетнаяФормаДанных данных2 = new ОтчетнаяФормаДанных();
                    данных2.ЗагрузитьИзБД(формы);
                    if (данных2.Данные.ДанныеЗагружены && данных2.Данные.СодержитТаблицу(записьИстории.КодТаблицыИсточника))
                    {
                        данных = данных2.Данные[записьИстории.КодТаблицыИсточника];
                    }
                    else
                    {
                        данных = null;
                    }
                }
                else
                {
                    данных = null;
                }
                выборка.Очистить();
            }
            catch (Exception exception)
            {
                Сообщение.ПоказатьИсключительнуюСитуацию("Ошибка загрузки данных источника.", exception);
                данных = null;
            }
            return данных;
        }

        private ТаблицаДанных ПолучитьТаблицуДанныхПриемника(ЗаписьИсторииСборкиИтоговыхОтчетов записьИстории)
        {
            ТаблицаДанных данных = null;
            try
            {
                Выборка<ХранимыеДанныеФормы> выборка = new Выборка<ХранимыеДанныеФормы>();
                выборка.Запрос.ДобавитьУсловиеОтбора("Идентификатор", записьИстории.ИдентификаторДанныхПриемника);
                выборка.ЗагрузитьПолностью();
                if (выборка.Count > 0)
                {
                    ХранимыеДанныеФормы формы = выборка[0];
                    формы.Загрузить();
                    ОтчетнаяФормаДанных данных2 = new ОтчетнаяФормаДанных();
                    данных2.ЗагрузитьИзБД(формы);
                    if (данных2.Данные.ДанныеЗагружены && данных2.Данные.СодержитТаблицу(записьИстории.КодТаблицыПриемника))
                    {
                        данных = данных2.Данные[записьИстории.КодТаблицыПриемника];
                    }
                    else
                    {
                        данных = null;
                    }
                }
                else
                {
                    данных = null;
                }
                выборка.Очистить();
            }
            catch (Exception exception)
            {
                Сообщение.ПоказатьИсключительнуюСитуацию("Ошибка загрузки данных приемника.", exception);
                данных = null;
            }
            return данных;
        }

        public ЭлементПросмотраЗаписиИсторииСборки ПолучитьЭлементПросмотра(int индекс)
        {
            if (!(this.ЭлементыЗагружены && ((индекс >= 0) && (индекс < this.списокЭлементов.Count))))
            {
                return null;
            }
            return this.списокЭлементов[индекс];
        }

        public bool ПостроитьОписание()
        {
            if (!this.ИсторияЗагружена)
            {
                return false;
            }
            this.ПостроитьСписокЭлементов();
            return this.ОписаниеЗагружено;
        }

        private bool ПостроитьСписокЭлементов()
        {
            if ((this.история == null) || (this.история.Count == 0))
            {
                return false;
            }
            bool flag = false;
            if (this.ПередФормированиемЭлементов != null)
            {
                this.ПередФормированиемЭлементов(this, null);
            }
            try
            {
                try
                {
                    if (this.списокЭлементов == null)
                    {
                        this.списокЭлементов = new List<ЭлементПросмотраЗаписиИсторииСборки>();
                    }
                    else
                    {
                        this.списокЭлементов.Clear();
                    }
                    foreach (ЗаписьИсторииСборкиИтоговыхОтчетов отчетов in this.история)
                    {
                        ЭлементПросмотраЗаписиИсторииСборки сборки = new ЭлементПросмотраЗаписиИсторииСборки(отчетов, (this.типПостроения == ТипПостроенияИсторииСборки.ПоСтолбцу) ? this.столбецПостроения : "");
                        if (сборки.ЭлементЗагружен)
                        {
                            if (this.ФормированиеЭлементов != null)
                            {
                                this.ФормированиеЭлементов(this, сборки);
                            }
                            this.списокЭлементов.Add(сборки);
                            if (this.типПостроения == ТипПостроенияИсторииСборки.ПоСтрокеСИсточником)
                            {
                                this.ЗагрузитьТаблицуИсточника(сборки.ЗаписьИстории);
                                this.ЗагрузитьТаблицуПриемника(сборки.ЗаписьИстории);
                            }
                        }
                    }
                    flag = this.списокЭлементов.Count > 0;
                }
                catch (Exception exception)
                {
                    Сообщение.ПоказатьИсключительнуюСитуацию("Ошибка построения элементов отображения истории.", exception);
                    this.списокЭлементов.Clear();
                    flag = false;
                }
            }
            finally
            {
                if (this.ПослеФормированияЭлементов != null)
                {
                    this.ПослеФормированияЭлементов(this, null);
                }
            }
            return flag;
        }

        public Guid ИдентификаторДанныхПриемника
        {
            get
            {
                return (this.ИсторияЗагружена ? this.история.ИдентификаторДанныхПриемника : Guid.Empty);
            }
        }

        public ИсторияСборкиИтоговыхОтчетов История
        {
            get
            {
                return this.история;
            }
        }

        public bool ИсторияЗагружена
        {
            get
            {
                return ((this.история != null) && (this.история.Count > 0));
            }
        }

        public string КодУчреждения
        {
            get
            {
                return this.кодУчреждения;
            }
        }

        public Dictionary<string, ОписаниеУровняПросмотраИсторииСборки> КэшПодчиненныхОписаний
        {
            get
            {
                return this.кэшПодчиненныхОписаний;
            }
            set
            {
                this.кэшПодчиненныхОписаний = value;
            }
        }

        public Dictionary<string, ТаблицаДанных> КэшТаблицИсточников
        {
            get
            {
                return this.кэшТаблицИсточников;
            }
            set
            {
                this.кэшТаблицИсточников = value;
            }
        }

        public bool ОписаниеЗагружено
        {
            get
            {
                return (this.ИсторияЗагружена && this.ЭлементыЗагружены);
            }
        }

        public ОписаниеУровняПросмотраИсторииСборки Родитель
        {
            get
            {
                return this.родитель;
            }
            set
            {
                this.родитель = value;
            }
        }

        public List<ЭлементПросмотраЗаписиИсторииСборки> СписокЭлементов
        {
            get
            {
                return this.списокЭлементов;
            }
        }

        public string СтолбецПостроения
        {
            get
            {
                return this.столбецПостроения;
            }
            set
            {
                this.столбецПостроения = value;
            }
        }

        public string Строка
        {
            get
            {
                return (this.ИсторияЗагружена ? this.история.КодСтрокиПриемника : "");
            }
        }

        public string Таблица
        {
            get
            {
                return (this.ИсторияЗагружена ? this.история.КодТаблицыПриемника : "");
            }
        }

        public ТипПостроенияИсторииСборки ТипПостроения
        {
            get
            {
                return this.типПостроения;
            }
            set
            {
                this.типПостроения = value;
            }
        }

        public string Учреждение
        {
            get
            {
                return (this.ИсторияЗагружена ? this.история.ЗначениеЭлементаЦепочкиПриемника : "");
            }
        }

        public string Форма
        {
            get
            {
                return (this.ИсторияЗагружена ? this.история.НаименованиеФормыПриемника : "");
            }
        }

        public bool ЭлементыЗагружены
        {
            get
            {
                return ((this.списокЭлементов != null) && (this.списокЭлементов.Count > 0));
            }
        }
    }
}

