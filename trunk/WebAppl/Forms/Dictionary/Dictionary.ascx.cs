using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Telerik.WebControls;
using Ѕарс.¬ебядро.»нтерфейс;
using Ѕарс.¬ебядро;
using Ѕарс.—воды;
using Ѕарс.—воды.ќтчетна€‘орма;
using Ѕарс.—воды.¬ебЅраузерќтчетных‘орм;
using Ѕарс.—воды.јргументы—обытийќтчетной‘ормы;
using Ѕарс.—воды.“ипыячеек;
using Ѕарс;


public partial class Forms_Dictionary_Dictionary : ¬еб‘ормаќбработкиќтчетной‘ормы
{
    public Forms_Dictionary_Dictionary()
        : base()
    {
        this.ѕри»нициализации—траницы += new Ѕарс.»нтерфейс.ќбработчик—обыти€(Forms_Dictionary_Dictionary_ѕри»нициализации—траницы);
    }

    private –ежимы¬ыбораЁлементов—правочника режим¬ыбора«аписей
    {
        get
        {
            return (–ежимы¬ыбораЁлементов—правочника)ViewState[ "–ежим¬ыбораЁлементов—правочника" ];
        }
        set
        {
            ViewState["–ежим¬ыбораЁлементов—правочника"] = value;
        }
    }

    private IList<«апись—правочника> список«аписей
    {
        get
        {
            return (IList<«апись—правочника>)ћенеджер—ессионныхѕеременных.ѕолучитьѕеременную»з—ессии(this.»дентификатор, "—писок«аписей");
        }
        set
        {
            ћенеджер—ессионныхѕеременных.—охранитьѕеременную¬—ессии(this.»дентификатор, "—писок«аписей", value);
        }
    }

    private List<string> списокЁлементов—ƒочерними = null;
    private Dictionary<string,«апись—правочника> словарь«аписей = null;

    void Forms_Dictionary_Dictionary_ѕри»нициализации—траницы(object ќтправитель, Ѕарс.»нтерфейс.јргументы—обыти€ јргументы)
    {
        if (!tree.IsCallBack)
        {
            режим¬ыбора«аписей = –ежимы¬ыбораЁлементов—правочника.¬се;
            список«аписей = new List<«апись—правочника>();

            if (ѕараметры√лавногоќкна.ѕараметр«адан("Params"))
            {
                string[] ѕараметры = ѕараметры√лавногоќкна["Params"].Split(',');

                string  оординатыячейки = ѕараметры[0];
                string код—троки = "";
                string код—толбца = "";
                string »дентификатор“аблицы = ѕараметры[1];

                ќтчетна€‘ормаƒанных форма = ѕолучитьќтчетную‘орму();
                ќписание—сылкиЌа—правочник описание = null;
                “аблицаƒанных таблицаƒанных = null;

                if (форма != null)
                {
                    ћетаструктура‘ормы мета = форма.ћетаструктура;

                    string[] координаты =  оординатыячейки.Split(':');

                    if (координаты.Length == 1)
                    {
                        код—толбца = координаты[0];
                        таблицаƒанных = null;

                        /// свободна€ €чейка формы
                        if (мета.—вободныеячейки.ContainsKey(координаты[0]))
                        {
                            ячейкаћетаструктуры €чейка = мета.—вободныеячейки[координаты[0]];
                            описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(€чейка.ќписание);
                        }
                    }
                    else
                    {
                        if (форма.ƒанные.“аблицы.ContainsKey(координаты[0]))
                        {
                            таблицаƒанных = форма.ƒанные.“аблицы[координаты[0]];
                        }

                        if (мета.“аблицы.ContainsKey(координаты[0]))
                        {
                            “аблицаћетаструктуры таблица = мета.“аблицы[координаты[0]];

                            код—толбца = координаты[1];
                            if (координаты.Length >= 3)
                            {
                                код—троки = координаты[2];
                            }

                            if (таблица.—вободныеячейки.ContainsKey(координаты[1]))
                            {
                                ячейкаћетаструктуры €чейка = таблица.—вободныеячейки[координаты[1]];
                                описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(€чейка.ќписание);
                            }
                            else if (таблица.—толбцы.ContainsKey(координаты[1]))
                            {
                                —толбецћетаструктуры столбец = таблица.—толбцы[координаты[1]];
                                описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(столбец.ќписание);
                            }
                        }
                    }
                }
                else
                {
                    this.Ўапка—траницы = "Ќевозможно определить отчетную форму.";
                    return;
                }

                if (описание == null)
                {
                    this.Ўапка—траницы = "Ќе задано описание ссылки на справочник.";
                    return;
                }

                this.«аголовок—траницы = string.Format("—правочник {0}", описание. од—правочника);

                object объектƒл€¬ыбора«аписей = null;

                if (описание.ƒополнительна€ќбработкаѕолучени€»сточника«аписей)
                {
                    јргументы—обыти€ѕолучени€»сточника«аписейƒл€¬ыбора»з—правочника јргументы—обыти€ = new јргументы—обыти€ѕолучени€»сточника«аписейƒл€¬ыбора»з—правочника();
                    јргументы—обыти€.ќтменить¬ыбор = false;
                    јргументы—обыти€.“аблицаƒанных = таблицаƒанных;
                    јргументы—обыти€. од—толбца = код—толбца;
                    јргументы—обыти€. од—троки = код—троки;
                    јргументы—обыти€.ќписание—сылки = описание;

                    try
                    {
                        объектƒл€¬ыбора«аписей = форма.¬ыполнитьћетодћакроса("ѕолучить»сточник«аписейƒл€¬ыбора»з—правочника", new object[] { јргументы—обыти€ });
                    }
                    catch (Exception ex)
                    {
                        this.Ўапка—траницы = "ќшибка формировани€ записей справочника : " + ex.Message + "\r\n\r\n" + ex.StackTrace;
                        return;
                    }

                    if (јргументы—обыти€.ќтменить¬ыбор)
                    {
                        this.Ўапка—траницы = "¬ыбор из справочника был отменен.";
                        return;
                    }

                }

                if (объектƒл€¬ыбора«аписей == null)
                {
                    »дентификатор”ниверсального—правочника идентификатор—правочника = new »дентификатор”ниверсального—правочника();
                    идентификатор—правочника.ѕолноеЌаименование—правочника = описание. од—правочника;

                    ”ниверсальный—правочник справочник = ”ниверсальный лассификатор.ѕолучить—правочникѕо»дентификатору(идентификатор—правочника);

                    if (справочник == null)
                    {
                        this.Ўапка—траницы = "”казанный справочник не существует.";
                        return;
                    }

                    справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки("–одительскийЁлемент");
                    справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки(" од");

                    справочник.«аписи.«апрос¬ыборки.ƒополнительное”словиеќтбора = Ѕарс.‘ильтрЌа«аписи—правочника.ѕолучить”словие‘ильтрации(описание.‘ильтр);

                    справочник.«аписи.“ребуетс€ѕерезагрузка = true;
                    справочник.«аписи.«агрузитьѕолностью();

                    справочник.ѕостроить—ловарь«аписей();

                    объектƒл€¬ыбора«аписей = справочник;
                }

                if (объектƒл€¬ыбора«аписей != null)
                {
                    if (объектƒл€¬ыбора«аписей is ¬ыбор»з”ниверсального—правочника)
                    {
                        if ((объектƒл€¬ыбора«аписей as ¬ыбор»з”ниверсального—правочника).—правочник != null)
                            режим¬ыбора«аписей = (объектƒл€¬ыбора«аписей as ¬ыбор»з”ниверсального—правочника).—правочник.–ежим¬ыбораЁлементов;
                        список«аписей = (объектƒл€¬ыбора«аписей as ¬ыбор»з”ниверсального—правочника).—писок«аписей;
                    }
                    else if (объектƒл€¬ыбора«аписей is »нтерфейс—писка’ранимыхќбъектов)
                    {
                        список«аписей = (IList<«апись—правочника>)(объектƒл€¬ыбора«аписей as »нтерфейс—писка’ранимыхќбъектов).¬ыборкаќбъектов;
                    }
                    else if (объектƒл€¬ыбора«аписей is IList<«апись—правочника>)
                    {
                        список«аписей = (объектƒл€¬ыбора«аписей as IList<«апись—правочника>);
                    }
                    else if (объектƒл€¬ыбора«аписей is ”ниверсальный—правочник)
                    {
                        ”ниверсальный—правочник справочник = (объектƒл€¬ыбора«аписей as ”ниверсальный—правочник);
                        справочник.ѕостроить—ловарь«аписей();

                        режим¬ыбора«аписей = справочник.–ежим¬ыбораЁлементов;

                        if (описание != null && описание.–ежим¬ыбора”казан)
                        {
                            // ќписание приоритетней
                            режим¬ыбора«аписей = описание.–ежим¬ыбора;
                        }

                        список«аписей = справочник.«аписи;
                        словарь«аписей = справочник.—ловарь«аписей;
                    }
                }

                if ((список«аписей == null) || (список«аписей.Count == 0))
                {
                    this.Ўапка—траницы = "Ќет записей дл€ выбора";
                    return;
                }
                else if ((словарь«аписей == null) || (словарь«аписей.Count == 0))
                {
                    словарь«аписей = new Dictionary<string, «апись—правочника>();

                    for (int index = 0; index < список«аписей.Count; index++)
                    {
                        «апись—правочника запись = список«аписей[index];

                        if (!словарь«аписей.ContainsKey(запись. од))
                        {
                            словарь«аписей.Add(запись. од, запись);
                        }
                    }
                }
            }
            else if (ѕараметры√лавногоќкна.ѕараметр«адан("Dictionary"))
            {
                string  од—правочника = ѕараметры√лавногоќкна["Dictionary"];

                this.«аголовок—траницы = string.Format("—правочник {0}",  од—правочника);

                »дентификатор”ниверсального—правочника идентификатор—правочника = new »дентификатор”ниверсального—правочника();
                идентификатор—правочника.ѕолноеЌаименование—правочника =  од—правочника;

                ”ниверсальный—правочник справочник = ”ниверсальный лассификатор.ѕолучить—правочникѕо»дентификатору(идентификатор—правочника);

                if (справочник == null)
                {
                    this.Ўапка—траницы = "”казанный справочник не существует.";
                    return;
                }

                справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки("–одительскийЁлемент");
                справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки(" од");

                справочник.«аписи.“ребуетс€ѕерезагрузка = true;
                справочник.«аписи.«агрузитьѕолностью();

                справочник.ѕостроить—ловарь«аписей();

                режим¬ыбора«аписей = справочник.–ежим¬ыбораЁлементов;
                список«аписей = справочник.«аписи;
                словарь«аписей = справочник.—ловарь«аписей;
            }
            else
            {
                this.Ўапка—траницы = "Ќе задан справочник.";
                return;
            }

            tree.DataFieldID = " од";
            tree.DataFieldParentID = " од–одительской«аписи";
            tree.DataTextField = "Ќаименование";
            tree.DataValueField = " од";

            if (список«аписей.Count > 500)
            {
                List<«апись—правочника> список = ѕолучить«начени€—правочника(null);

                foreach («апись—правочника запись in список)
                {
                    RadTreeNode node = new RadTreeNode();

                    node.Text = запись.ѕолноеЌаименование«аписи;
                    node.Value = запись. од;

                    if (списокЁлементов—ƒочерними.Contains(запись. од))
                    {
                        if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.Ќе√рупповые)
                        {
                            node.Attributes.Add("Disable", "true");
                            node.CssClass = "Disabled";
                        }

                        node.ExpandMode = ExpandMode.ServerSide;
                    }
                    else
                    {
                        if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.√рупповые)
                        {
                            node.Attributes.Add("Disable", "true");
                            node.CssClass = "Disabled";
                        }

                        node.ExpandMode = ExpandMode.ClientSide;
                    }

                    tree.Nodes.Add(node);
                }
            }
            else
            {
                tree.DataSource = —оздать“аблицу();
                tree.NodeBound += new RadTreeView.RadTreeViewEventHandler(tree_NodeBound);
                tree.DataBind();
            }
        }
    }

    protected void tree_NodeBound(object o, RadTreeNodeEventArgs e)
    {
        RadTreeNode node = e.NodeBound;

        DataRowView dataSourceRow = (DataRowView)node.DataItem;

        string  од«аписи = (string)dataSourceRow[" од"];

        «апись—правочника запись = null;

        if ((словарь«аписей != null) && словарь«аписей.ContainsKey( од«аписи))
        {
            запись = словарь«аписей[ од«аписи];
        }

        if (запись.–ежим¬ыбора == –ежим¬ыбораЁлемента—правочника.ќпредел€етс€—правочником)
        {

            if (списокЁлементов—ƒочерними.Contains( од«аписи))
            {
                if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.Ќе√рупповые)
                {
                    node.Attributes.Add("Disable", "true");
                    node.CssClass = "Disabled";
                }
            }
            else
            {
                if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.√рупповые)
                {
                    node.Attributes.Add("Disable", "true");
                    node.CssClass = "Disabled";
                }
            }
        }
        else
        {
            if (запись.–ежим¬ыбора == –ежим¬ыбораЁлемента—правочника.¬ыбор«апрещен)
            {
                node.Attributes.Add("Disable", "true");
                node.CssClass = "Disabled";
            }
        }
    }

    private DataTable —оздать“аблицу()
    {
        DataTable table = new DataTable();

        DataColumn[] keys = new DataColumn[1];

        keys[0] = table.Columns.Add(" од");
        table.Columns.Add(" од–одительской«аписи");
        table.Columns.Add("Ќаименование");

        table.PrimaryKey = keys;

        списокЁлементов—ƒочерними = new List<string>();

        string код–одител€ = null;

        foreach («апись—правочника запись in список«аписей)
        {
            try
            {
                if (!string.IsNullOrEmpty(запись. од–одительской«аписи) && список«аписей.Contains(запись.–одительска€«апись))
                {
                    код–одител€ = запись. од–одительской«аписи;
                }
                else
                {
                    код–одител€ = null;
                }

                if (!table.Rows.Contains(запись. од))
                {
                    table.Rows.Add(new string[] { запись. од, код–одител€, запись.ѕолноеЌаименование«аписи });
                }
            }
            catch( ConstraintException )
            {
                #if DEBUG 
                throw;
                #endif
            }

            if ( !string.IsNullOrEmpty( код–одител€ ) && !списокЁлементов—ƒочерними.Contains(код–одител€))
            {
                списокЁлементов—ƒочерними.Add(код–одител€);
            }
        }

        return table;
    }

    public List<«апись—правочника> ѕолучить«начени€—правочника(string  од–одительской«аписи)
    {
        List<«апись—правочника> результат = new List<«апись—правочника>();

        списокЁлементов—ƒочерними = new List<string>();

        foreach («апись—правочника запись in список«аписей)
        {
            if ( ( запись.–одительска€«апись != null ) && !списокЁлементов—ƒочерними.Contains(запись. од–одительской«аписи) )
            {
                списокЁлементов—ƒочерними.Add(запись. од–одительской«аписи);
            }

            if (string.IsNullOrEmpty( од–одительской«аписи))
            {
                if (запись.–одительска€«апись == null)
                {
                    результат.Add(запись);
                }
                else if (!список«аписей.Contains(запись.–одительска€«апись))
                {
                    результат.Add(запись);
                }
            }
            else 
            {
                if ((запись.–одительска€«апись != null) && (запись. од–одительской«аписи ==  од–одительской«аписи))
                {
                    результат.Add(запись);
                }
            }
        }

        return результат;
    }

    protected void ƒерево_справочника_NodeExpand(object o, RadTreeNodeEventArgs e)
    {
        RadTreeNode expandedNode = e.NodeClicked;

        List<«апись—правочника> список = ѕолучить«начени€—правочника(expandedNode.Value);

        foreach («апись—правочника запись in список)
        {
            RadTreeNode node = new RadTreeNode();

            node.Text = запись.ѕолноеЌаименование«аписи;
            node.Value = запись. од;

            if (списокЁлементов—ƒочерними.Contains(запись. од))
            {
                if ( режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.Ќе√рупповые)
                {
                    node.Attributes.Add("Disable", "true");
                    node.CssClass = "Disabled";
                }

                node.ExpandMode = ExpandMode.ServerSide;
            }
            else
            {
                if ( режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.√рупповые)
                {
                    node.Attributes.Add("Disable", "true");
                    node.CssClass = "Disabled";
                }

                node.ExpandMode = ExpandMode.ClientSide;
            }

            expandedNode.Nodes.Add(node);
        }

        expandedNode.ExpandMode = ExpandMode.ClientSide;
        expandedNode.Expanded = true;
    }

    protected void  нопка_найти_Click(object sender, EventArgs e)
    {

    }
}
