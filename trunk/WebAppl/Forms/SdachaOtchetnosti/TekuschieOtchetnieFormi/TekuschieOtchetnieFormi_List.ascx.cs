using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Telerik.RadTreeViewUtils;
using Telerik.WebControls;

using Барс.ВебЯдро;
using Барс.ВебЯдро.Интерфейс;
using Барс.Своды.ОтчетнаяФорма;
using Барс.Своды;
using Барс;
using Барс.Ядро;

public partial class Forms_SdachaOtchetnosti_TekuschieOtchetnieFormi_TekuschieOtchetnieFormi_List : ВебФорма
{
    public Forms_SdachaOtchetnosti_TekuschieOtchetnieFormi_TekuschieOtchetnieFormi_List()
        : base()
    {
        this.ЗаголовокСтраницы = "Список текущих отчетных форм";
        this.ПриИнициализацииСтраницы += new Барс.Интерфейс.ОбработчикСобытия(ФормаСписка_ПриИнициализацииСтраницы);
        this.ПриЗагрузкеСтраницы += new Барс.Интерфейс.ОбработчикСобытия(ФормаСписка_List_ПриЗагрузкеСтраницы);
    }

    #region Свойство : СписокЯчеек
    private СписокЯчеекЦепочки СписокЯчеек
    {
        get
        {
            СписокЯчеекЦепочки списокЯчеек = (СписокЯчеекЦепочки)Барс.ВебЯдро.МенеджерСессионныхПеременных.ПолучитьПеременнуюИзСессии(this.Идентификатор, "СписокЯчеекЦепочки");

            if (списокЯчеек == null)
            {
                списокЯчеек = new СписокЯчеекЦепочки();

                Барс.ВебЯдро.МенеджерСессионныхПеременных.СохранитьПеременнуюВСессии(this.Идентификатор, "СписокЯчеекЦепочки", списокЯчеек);
            }

            return списокЯчеек;
        }
    }
    #endregion

    #region Обработчик ПриИнициализацииСтраницы
    void ФормаСписка_ПриИнициализацииСтраницы(object Отправитель, Барс.Интерфейс.АргументыСобытия Аргументы)
    {
    }
    #endregion

    #region Обработчик ПриЗагрузкеСтраницы
    void ФормаСписка_List_ПриЗагрузкеСтраницы(object Отправитель, Барс.Интерфейс.АргументыСобытия Аргументы)
    {
        this.Таблица_элементы.ItemDataBound += new GridItemEventHandler(Таблица_элементы_ItemDataBound);
        
        if (!this.IsPostBack)
        {
            #region Конфигурация выпадающего списка
            if (ПеременныеСессии.ТекущееУчреждение != null)
            {
                СписокОтчетныхПериодов списокОтчетныхПериодов = new СписокОтчетныхПериодов();
                списокОтчетныхПериодов.Загрузить();

                this.ВыпадающийСписок_отчетныеПериоды.КомпозитностьСписка = false;
                this.ВыпадающийСписок_отчетныеПериоды.ИсточникЗаписей = списокОтчетныхПериодов;
                this.ВыпадающийСписок_отчетныеПериоды.DataTextField = "Наименование";
                this.ВыпадающийСписок_отчетныеПериоды.DataValueField = "Код";
                this.ВыпадающийСписок_отчетныеПериоды.DataBind();

                this.ВыпадающийСписок_отчетныеПериоды.SelectedIndex = списокОтчетныхПериодов.Count - 1;
            }
            else
            {
                this.ВыпадающийСписок_отчетныеПериоды.Текст = "Не задано учреждение!";
            }
            #endregion

            #region Конфигурация дерева

            Дерево_ЭлементовЦепочки.DataFieldID = "КлючИдентификатора";
            Дерево_ЭлементовЦепочки.DataFieldParentID = "КлючРодителя";
            Дерево_ЭлементовЦепочки.DataTextField = "Наименование";
            Дерево_ЭлементовЦепочки.DataValueField = "КлючИдентификатора";

            #endregion

            #region Конфигурация таблица
            Таблица_элементы.ИсточникЗаписей = new СписокТекущихОтчетныхФорм();
            Таблица_элементы.РедактироватьВТаблице = false;
            Таблица_элементы.РазрешитьУдаление = false;
            Таблица_элементы.РазрешитьДобавление = false;
            Таблица_элементы.АвтоподборВысоты = false;
            Таблица_элементы.ФормаРедактирования = ВзимодействиеФорм.ПолучитьURLПоТипу(typeof(ТекущаяОтчетнаяФорма));

            Таблица_элементы.ClientSettings.ClientEvents.OnRowDblClick = string.Format("TableDblClick('{0}','{1}:{2}_ИсточникЗаписей','{3}');", Таблица_элементы.ФормаРедактирования, this.Идентификатор, Таблица_элементы.ClientID, Таблица_элементы.ClientID);

            СтолбецТаблицы столбец_КомпонентОтчетногоПериода = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_КомпонентОтчетногоПериода);
            столбец_КомпонентОтчетногоПериода.Заголовок = "Компонент отчетного периода";
            столбец_КомпонентОтчетногоПериода.ИмяПоляИсточникаДанных = "КомпонентОтчетногоПериодаСтрокой";

            СтолбецТаблицы столбец_Группа = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_Группа);
            столбец_Группа.Заголовок = "Группа";
            столбец_Группа.ИмяПоляИсточникаДанных = "Группа";

            СтолбецТаблицы столбец_Форма = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_Форма);
            столбец_Форма.Заголовок = "Отчетная форма";
            столбец_Форма.ИмяПоляИсточникаДанных = "КодФормы";
            столбец_Форма.ШиринаСтолбца = 140;

            СтолбецТаблицы столбец_наимФормы = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_наимФормы);
            столбец_наимФормы.Заголовок = "Наименование формы";
            столбец_наимФормы.ИмяПоляИсточникаДанных = "НаименованиеФормы";
            столбец_наимФормы.ШиринаСтолбца = 140;

            СтолбецТаблицы столбец_Состояние = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_Состояние);
            столбец_Состояние.Заголовок = "Состояние";
            столбец_Состояние.ИмяПоляИсточникаДанных = "СостояниеДанныхФорм";
            столбец_Состояние.ШиринаСтолбца = 140;

            СтолбецТаблицы столбец_МежфоменныеУвязки = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_МежфоменныеУвязки);
            столбец_МежфоменныеУвязки.Заголовок = "Межформенные увязки";
            столбец_МежфоменныеУвязки.ИмяПоляИсточникаДанных = "ПровереныМежформенныеУвязкиСтрокой";
            столбец_МежфоменныеУвязки.ШиринаСтолбца = 140;

            СтолбецТаблицы столбец_ВнутриформенныеУвязки = new СтолбецТаблицы();
            Таблица_элементы.ДобавитьСтолбец(столбец_ВнутриформенныеУвязки);
            столбец_ВнутриформенныеУвязки.Заголовок = "Внутриформенные увязки";
            столбец_ВнутриформенныеУвязки.ИмяПоляИсточникаДанных = "ПровереныВнутриформенныеУвязкиСтрокой";
            столбец_ВнутриформенныеУвязки.ШиринаСтолбца = 140;
            #endregion
            
            Подменю_внутрУвязки.PostBack = false;
            ПунктМеню_внутрУвязки.NavigateUrl = "javascript:ClickElementMenu('ProverkaIn')";
            ПунктМеню_внутрРезультаты.PostBack = false;

            Подменю_межУвязки.PostBack = false;
            ПунктМеню_межформУвязки.NavigateUrl = "javascript:ClickElementMenu('ProverkaOut')";
            ПунктМеню_межформРезультаты.PostBack = false;

            ПунктМеню_ПоказатьСпсокУвязок.PostBack = false;
            ПунктМеню_историяУвязок.PostBack = false;
            ПунктМеню_экспертиза.PostBack = false;
            Разделитель_Увязки.PostBack = false;
            Подменю_состояние.PostBack = false;

            ПунктМеню_историяИзменений.PostBack = false;
            Разделитель_печатныхФорм.PostBack = false;
            Подменю_Печать.NavigateUrl = "javascript:ClickElementMenu('PrintForms')";
            Разделитель.PostBack = false;
            Подменю_данные.PostBack = false;

            this.Подменю_ЭЦП.PostBack = false;
            this.ПунктМеню_подписать.PostBack = false;
            this.ПунктМеню_подписать.NavigateUrl = string.Format("javascript:SignForm('{0}','{1}_ИсточникЗаписей')", Идентификатор, Таблица_элементы.ClientID);
            this.ПунктМеню_соподписать.PostBack = false;
            this.ПунктМеню_соподписать.NavigateUrl = string.Format("javascript:CoSignForm('{0}','{1}_ИсточникЗаписей')", Идентификатор, Таблица_элементы.ClientID);
            this.ПунктМеню_проверитьПодпись.PostBack = false;
            this.ПунктМеню_проверитьПодпись.NavigateUrl = string.Format("javascript:CheckSign('{0}','{1}_ИсточникЗаписей')", Идентификатор, Таблица_элементы.ClientID);
            this.ПунктМеню_удалитьПодпись.PostBack = false;
            this.ПунктМеню_удалитьПодпись.NavigateUrl = string.Format("javascript:DelSign('{0}','{1}_ИсточникЗаписей')", Идентификатор, Таблица_элементы.ClientID);
            this.ПунктМеню_показатьПодпись.PostBack = true;

            ВыпадающийСписок_отчетныеПериоды_TextChanged(null, null);
        }

        СтолбецВыпадающегоСписка столбецВыпадающегоСписка = new СтолбецВыпадающегоСписка();
        столбецВыпадающегоСписка.ШиринаСтолбца = 200;

        ВыпадающийСписок_отчетныеПериоды.ДобавитьСтолбец(столбецВыпадающегоСписка);
    }
    #endregion

    #region Методы загрузки списка ячеек

    public void ЗагрузитьСписокЯчеек(List<ЯчейкаЦепочки> списокЯчеек)
    {
        ЗагрузитьСписокЯчеек(списокЯчеек, null, 0);
    }

    public void ЗагрузитьСписокЯчеек(List<ЯчейкаЦепочки> списокЯчеек, RadTreeNode ParentNode, int КоличествоЭлементов)
    {
        if (ParentNode == null)
        {
            Дерево_ЭлементовЦепочки.Nodes.Clear();
        }
        else
        {
            ParentNode.Nodes.Clear();
        }

        RadTreeNode головнойУзел = null;

        /*
         - Узел
         - - ГоловнойУзел
         - Узел
         - Узел
         - - ГоловнойУзел
        */

        int i = КоличествоЭлементов + списокЯчеек.Count - 1;

        списокЯчеек.Reverse();

        foreach (ЯчейкаЦепочки ячейка in списокЯчеек)
        {
            RadTreeNode node = new RadTreeNode();
            node.Text = ячейка.Наименование;

            node.Value = i.ToString();

            if (ячейка.НаличиеВетви && ячейка.Родитель != Guid.Empty)
            {
                node.ExpandMode = ExpandMode.ServerSide;
            }
            else
            {
                node.ExpandMode = ExpandMode.ClientSide;
            }

            if (ячейка.Родитель == Guid.Empty)
            {
                node.PostBack = false;
            }

            if (ParentNode == null)
            {
                if (головнойУзел != null && ячейка.Родитель != Guid.Empty)
                {
                    головнойУзел.Nodes.Add(node);
                }
                else
                {
                    Дерево_ЭлементовЦепочки.Nodes.Add(node);

                    if (ячейка.Родитель == Guid.Empty)
                    {
                        головнойУзел = node;
                    }
                }
            }
            else
            {
                ParentNode.Nodes.Add(node);
            }

            i--;
        }

        списокЯчеек.Reverse();
    }
    #endregion

    #region Метод получения текущего отчетного периода
    private ОтчетныйПериод ПолучитьТекущийОтчетныйПериод()
    {
        if (!string.IsNullOrEmpty(ВыпадающийСписок_отчетныеПериоды.SelectedValue))
        {
            string КодОтчетногоПериода = ВыпадающийСписок_отчетныеПериоды.SelectedValue;

            if (!string.IsNullOrEmpty(КодОтчетногоПериода))
            {
                Выборка<ОтчетныйПериод> отчетныеПериоды = new Выборка<ОтчетныйПериод>();
                отчетныеПериоды.ЗапросВыборки.ДобавитьУсловиеОтбора("Код", КодОтчетногоПериода);

                if (ПеременныеСессии.ТекущийПрофиль != null)
                {
                    отчетныеПериоды.Запрос.ДополнительноеУсловиеОтбора = "t0.userprofile_id=:p or t0.userprofile_id is null";
                    отчетныеПериоды.Запрос.ДобавитьПараметрЗапроса(ПеременныеСессии.ТекущийПрофиль);
                }

                отчетныеПериоды.Загрузить();

                if (отчетныеПериоды.КоличествоЗаписей != 0)
                {
                    return отчетныеПериоды[0];
                }
            }
        }

        return null;
    }
    #endregion

    #region Метод обновления дерева учреждений
    public void ОбновитьДеревоУчреждений(ОтчетныйПериод ТекущийОтчетныйПериод)
    {
        if (ТекущийОтчетныйПериод == null)
        {
            СписокЯчеек.Clear();
            Дерево_ЭлементовЦепочки.Nodes.Clear();
            return;
        }

        СписокЯчеекЦепочки списокЯчеек = СписокЯчеек;

        try
        {
            if (ПеременныеСессии.ТекущееУчреждение == null)
            {
                списокЯчеек.Очистить();

                списокЯчеек.Загрузить(ТекущийОтчетныйПериод);
            }
            else
            {
                списокЯчеек.Загрузить(ТекущийОтчетныйПериод, ПеременныеСессии.ТекущееУчреждение);
            }

            ЗагрузитьСписокЯчеек(списокЯчеек);
        }
        catch
        {
        }
    }
    #endregion

    #region Метод ОбновитьИЗагрузитьФорму
    public ОтчетнаяФормаДанных ОбновитьИЗагрузитьФорму(ТекущаяОтчетнаяФорма ТекущаяФорма)
    {
        ОтчетнаяФормаДанных отчетнаяФорма = null;

        try
        {
            ИдентификаторМетаописанияФормы идентификатор = new ИдентификаторМетаописанияФормы();
            идентификатор.ИдентификаторМетаописания = ТекущаяФорма.ИдентификаторМетаописания;
            идентификатор.ДатаАктуальности = ТекущаяФорма.ОтчетныйПериод.ДатаНачала;

            ХранилищеМетаописаний.ОбновитьЛокальноеМетаописание(идентификатор);

            отчетнаяФорма = new ОтчетнаяФормаДанных();

            отчетнаяФорма.ЗагрузитьМетаструктуру(идентификатор);

            отчетнаяФорма.КомпонентОтчетногоПериода = ТекущаяФорма.КомпонентОтчетногоПериода;
            отчетнаяФорма.Учреждение = ТекущаяФорма.Учреждение;
            отчетнаяФорма.ЭлементЦепочки = ТекущаяФорма.ЭлементЦепочки.ТипЭлементаЦепочки;

            ХранилищеДанныхФорм.ОбновитьЛокальныеДанные(отчетнаяФорма.Данные.Идентификатор);

            string СтрокаОграничений = ПроверкаДоступаКЭлементамОтчетнойФормы.ПолучитьСтрокуОграниченийДоступаКЭлементам(отчетнаяФорма.Данные.Идентификатор);

            отчетнаяФорма.СтрокаОграничений = СтрокаОграничений;

            отчетнаяФорма.ЗагрузитьДанные();
        }
        catch (Exception)
        {
            отчетнаяФорма = null;
            throw new Exception("Не удалось обновить и загрузить отчетную форму");
        }

        return отчетнаяФорма;
    }
    #endregion

    #region Обработчик Таблица_элементы_ItemDataBound
    void Таблица_элементы_ItemDataBound(object sender, GridItemEventArgs e)
    {
        try
        {
            if (e.Item is GridDataItem)
            {
                int DataSourceIndex = Таблица_элементы.ПолучитьИндексИсточникаЗаписей(e.Item.ItemIndex);

                if (DataSourceIndex != -1)
                {
                    e.Item.Attributes.Add("DataSourceIndex", DataSourceIndex.ToString());

                    ТекущаяОтчетнаяФорма форма = (ТекущаяОтчетнаяФорма)Таблица_элементы.ПолучитьЗначениеИсточникаЗаписей(e.Item.ItemIndex);

                    if (форма != null)
                    {
                        int ИндексИсточникаДанных = DataSourceIndex;

                        if (ИндексИсточникаДанных != -1)
                        {
                            #region Команды на выполнение скриптов для конкретной формы
                            string КомандаНаПроверкуВнутриформенныхУвязок = string.Format("MainForm.aspx?Form=Forms/ReportForms/Uviazki/UviazkiReport.ascx&Index={0}&SessionParam={1}:{2}&gridClientID={3}&Params=In", ИндексИсточникаДанных, this.Идентификатор, string.Format("{0}_ИсточникЗаписей", Таблица_элементы.ClientID), Таблица_элементы.ClientID);
                            e.Item.Attributes.Add("ScriptProverkaIn", КомандаНаПроверкуВнутриформенныхУвязок);

                            string КомандаНаПроверкуМежформенныхУвязок = string.Format("MainForm.aspx?Form=Forms/ReportForms/Uviazki/UviazkiReport.ascx&Index={0}&SessionParam={1}:{2}&gridClientID={3}&Params=Out", ИндексИсточникаДанных, this.Идентификатор, string.Format("{0}_ИсточникЗаписей", Таблица_элементы.ClientID), Таблица_элементы.ClientID);
                            e.Item.Attributes.Add("ScriptProverkaOut", КомандаНаПроверкуМежформенныхУвязок);

                            string КомандаНаПечатныеФормы = string.Format("MainForm.aspx?Form=Forms/ReportForms/PrintForms/PrintForms.ascx&Index={0}&SessionParam={1}:{2}", ИндексИсточникаДанных, this.Идентификатор, string.Format("{0}_ИсточникЗаписей", Таблица_элементы.ClientID));
                            e.Item.Attributes.Add("ScriptPrintForms", КомандаНаПечатныеФормы);
                            #endregion
                        }

                        string elements = "IsSuccess,";

                        List<СостояниеДанныхФорм> возможныеПереходыСостояния = null;
                        try
                        {
                            возможныеПереходыСостояния = КонтрольСтатусаФормы.ПолучитьВозможныеРучныеСтатусыПеревода(форма.ДанныеФормы);
                        }
                        catch
                        {
                        }

                        if ( возможныеПереходыСостояния != null && возможныеПереходыСостояния.Count > 0)
                        {
                            elements += "Status,";
                            foreach (СостояниеДанныхФорм состояние in возможныеПереходыСостояния)
                            {
                                switch (состояние)
                                {
                                    case СостояниеДанныхФорм.Пусто: elements += "StatusNone,"; break;
                                    case СостояниеДанныхФорм.Черновик: elements += "StatusChernovik,"; break;
                                    case СостояниеДанныхФорм.Заполнено: elements += "StatusZapolneno,"; break;
                                    case СостояниеДанныхФорм.Проверено: elements += "StatusProvereno,"; break;
                                    case СостояниеДанныхФорм.Экспертиза: elements += "StatusExpert,"; break;
                                    case СостояниеДанныхФорм.Утверждено: elements += "StatusUtverjdeno,"; break;
                                }
                            }
                        }

                        if (форма.ДанныеФормы != null)
                            elements += "Expertiza,";


                        if (форма.ДанныеФормы != null && форма.ДанныеФормы.СостояниеДанныхФорм == СостояниеДанныхФорм.Черновик)
                        {
                            elements += "Data,Clear,";
                        }

                        if (!string.IsNullOrEmpty(elements))
                        {
                            e.Item.Attributes.Add("elements", elements.Substring(0, elements.Length - 1));
                        }


                        ИдентификаторМетаописанияФормы идентификаторМетаописания = форма.ПолучитьИдентификаторМетаописанияФормы();

                        СписокМетаописанийПечатныхФорм СписокФорм = new СписокМетаописанийПечатныхФорм();
                        try
                        {
                            СписокФорм.Загрузить(идентификаторМетаописания);
                        }
                        catch
                        {
                        }

                        string signData = string.Empty;

                        if (форма.ДанныеФормы != null)
                        {
                            if (форма.ДанныеФормы.СтатусЭЦП)
                            {
                                signData = "Sign";
                            }
                            else if( форма.ДанныеФормы.СостояниеДанныхФорм == СостояниеДанныхФорм.Проверено )
                            {
                                signData = "AllowSign";
                            }
                        }

                        e.Item.Attributes.Add("signData", signData);
                    }
                }
            }
        }
        catch( Exception )
        {
        }
    }

    #endregion

    #region Обработчик ВыпадающийСписок_отчетныеПериоды_TextChanged
    protected void ВыпадающийСписок_отчетныеПериоды_TextChanged(object sender, EventArgs e)
    {
        ОтчетныйПериод отчетныйПериод = ПолучитьТекущийОтчетныйПериод();

        ОбновитьДеревоУчреждений(отчетныйПериод);
    }
    #endregion

    #region Дерево_ЭлементовЦепочки_NodeExpand
    protected void Дерево_ЭлементовЦепочки_NodeExpand(object o, RadTreeNodeEventArgs e)
    {
        ЯчейкаЦепочки ячейка = СписокЯчеек[int.Parse(e.NodeClicked.Value)];

        if (ячейка.НаличиеВетви && e.NodeClicked.Nodes.Count == 0)
        {
            int КоличествоЯчеек = СписокЯчеек.Count;

            List<ЯчейкаЦепочки> новыеЯчейки = СписокЯчеек.ВыполнитьЗагрузкуЦепочек(ячейка.ЦепочкаСдачи, ячейка.Ключ, ячейка);

            ЗагрузитьСписокЯчеек(новыеЯчейки, e.NodeClicked, КоличествоЯчеек);
        }

        e.NodeClicked.ExpandMode = ExpandMode.ClientSide;
    }
    #endregion

    #region Дерево_ЭлементовЦепочки_NodeClick
    protected void Дерево_ЭлементовЦепочки_NodeClick(object o, RadTreeNodeEventArgs e)
    {
        try
        {
            RadTreeNode node = e.NodeClicked;

            if (node == null)
            {
                node = Дерево_ЭлементовЦепочки.SelectedNode;
            }

            if (node == null)
            {
                return;
            }

            ЯчейкаЦепочки ячейка = СписокЯчеек[int.Parse(node.Value)];

            if (ячейка == null)
                return;

            СписокТекущихОтчетныхФорм списокФорм = new СписокТекущихОтчетныхФорм();
            списокФорм.Загрузить(ПолучитьТекущийОтчетныйПериод(), СписокЯчеек, ячейка);

            Таблица_элементы.ИсточникЗаписей = списокФорм;
            Таблица_элементы.ОбновитьИсточникЗаписей();
            Таблица_элементы.Rebind();
        }
        catch( Exception )
        {
            throw;
        }
    }
    #endregion

    #region Обработчик RadMenu1_ItemClick
    protected void RadMenu1_ItemClick(object sender, RadMenuEventArgs e)
    {
        try
        {
            int ИндексВыделенойСтроки = -1;

            if (Таблица_элементы.SelectedItems[0] != null)
                ИндексВыделенойСтроки = Таблица_элементы.SelectedItems[0].DataSetIndex;

            if (ИндексВыделенойСтроки == -1)
                return;

            СостояниеДанныхФорм состояние = СостояниеДанныхФорм.Пусто;

            switch (e.Item.Value)
            {
                case "StatusChernovik":
                    {
                        состояние = СостояниеДанныхФорм.Черновик;
                    }
                    break;

                case "StatusZapolneno":
                    {
                        состояние = СостояниеДанныхФорм.Заполнено;
                    }
                    break;

                case "StatusProvereno":
                    {
                        состояние = СостояниеДанныхФорм.Проверено;
                    }
                    break;

                case "StatusExpert":
                    {
                        состояние = СостояниеДанныхФорм.Экспертиза;
                    }
                    break;

                case "StatusUtverjdeno":
                    {
                        состояние = СостояниеДанныхФорм.Утверждено;
                    }
                    break;

                case "Clear":
                    {
                        ТекущаяОтчетнаяФорма форма = (ТекущаяОтчетнаяФорма)Таблица_элементы.ПолучитьЗначениеИсточникаЗаписей(ИндексВыделенойСтроки);

                        if (форма.ДанныеФормы != null)
                        {
                            if (!ПроверкаДоступаКОтчетнойФорме.ПроверитьДоступКФорме(форма.ОтчетныйПериод, форма.КомпонентОтчетногоПериода,
                            форма.ИдентификаторМетаописания, форма.Учреждение, ТипДоступаКОтчетнойФорме.Редактирование, форма.ДополнительныйСтатус))
                            {
                                //throw new Exception("Извините, у вас нет прав на редактирования этой формы.");
                                return;
                            }

                            ОтчетнаяФормаДанных отчетнаяФорма = ОбновитьИЗагрузитьФорму(форма);

                            if (отчетнаяФорма != null)
                            {
                                отчетнаяФорма.Данные.ОчиститьДанные();

                                отчетнаяФорма.СохранитьДанные();
                            }

                        }

                        Таблица_элементы.Rebind();
                    }
                    break;

                case "ShowSign":
                    ТекущаяОтчетнаяФорма текущаяФорма = (ТекущаяОтчетнаяФорма)Таблица_элементы.ПолучитьЗначениеИсточникаЗаписей(ИндексВыделенойСтроки);

                    try
                    {
                        Dictionary<string, string>[] Свойства = текущаяФорма.ДанныеФормы.СвойстваЭЦП();

                        if (Свойства != null)
                        {
                            СписокСертификатовЭЦП Отчет = new СписокСертификатовЭЦП(Свойства);
                            Барс.ВебЯдро.ЭкспортФайла.ЭкспортироватьОтчет(Отчет);
                        }
                    }
                    catch
                    {
                    }

                    break;
            }

            if (состояние != СостояниеДанныхФорм.Пусто)
            {
                ТекущаяОтчетнаяФорма форма = (ТекущаяОтчетнаяФорма)Таблица_элементы.ПолучитьЗначениеИсточникаЗаписей(ИндексВыделенойСтроки);

                if (форма.ДанныеФормы != null)
                {
                    if (форма.ДанныеФормы != null && !форма.ДанныеФормы.УстановитьСтатусДанных(состояние))
                    {

                        throw new Exception("Изменение статуса невозможно.\n\nВ данный момент отчетная форма находится в работе на другой рабочей станции.");
                    }
                }

                Таблица_элементы.Rebind();
            }

            //Орабатчик для печатной формы
            RadMenuItem parentItem = e.Item.Parent as RadMenuItem;

            if (parentItem != null && parentItem.Value == "Print")
            {
            }
        }
        catch
        {
        }
    }
    #endregion

    #region Обработчик RadAjaxManager1_ResolveUpdatedControls
    protected void RadAjaxManager1_ResolveUpdatedControls(object sender, UpdatedControlsEventArgs e)
    {
        if (e.PostBackControlID.Contains("Дерево_ЭлементовЦепочки") )
        {
            if (this.Page.Request["__EVENTARGUMENT"].ToUpper().StartsWith("NODEEXPAND"))
            {
                e.UpdatedControls.Add(new AjaxUpdatedControl(Дерево_ЭлементовЦепочки.UniqueID, "ctl01:AjaxLoadingPanel1"));
            }
            else if(this.Page.Request["__EVENTARGUMENT"].ToUpper().StartsWith("NODECLICK"))
            {
                e.UpdatedControls.Add(new AjaxUpdatedControl(Таблица_элементы.UniqueID, "ctl01:AjaxLoadingPanel1"));
            }
        }
    }
    #endregion
}