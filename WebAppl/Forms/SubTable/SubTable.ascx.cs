using System;
using System.Diagnostics;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Xml.XPath;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using Ѕарс.¬ебядро.»нтерфейс;
using Ѕарс.¬ебядро;
using Ѕарс.—воды;
using Ѕарс.—воды.¬ебЅраузерќтчетных‘орм;
using Ѕарс.—воды.ќтчетна€‘орма;
using Ѕарс.“ипы;
using Ѕарс;

public partial class Forms_SubTable_SubTable : ¬еб‘орма
{

    #region  онструктор

    public Forms_SubTable_SubTable()
        : base()
    {
        this.ѕри»нициализации—траницы += new Ѕарс.»нтерфейс.ќбработчик—обыти€(Forms_SubTable_SubTable_ѕри»нициализации—траницы);
    }
    
    #endregion

    #region ѕол€

    private ќтчетна€‘ормаƒанных отчетна€‘орма;

    #endregion
    
    #region ќбработчики событий
    
    void Forms_SubTable_SubTable_ѕри»нициализации—траницы(object ќтправитель, Ѕарс.»нтерфейс.јргументы—обыти€ јргументы)
    {
        string —убтаблица = string.Empty;
        string »дентификатор‘ормы = string.Empty;
        string »м€ѕеременной = string.Empty;

        if (ѕараметры√лавногоќкна.ѕараметр«адан("Params"))
        {
            —убтаблица = ѕараметры√лавногоќкна["Params"];
        }

        if (ѕараметры√лавногоќкна.ѕараметр«адан("SessionParam"))
        {
            string SessionParam = ѕараметры√лавногоќкна["SessionParam"];

            string[] SessionParams = SessionParam.Split(':');

            »дентификатор‘ормы = SessionParams[0];
            »м€ѕеременной = SessionParams[1];
        }

        if (string.IsNullOrEmpty(—убтаблица) || string.IsNullOrEmpty(»дентификатор‘ормы) || string.IsNullOrEmpty(»м€ѕеременной))
        {
            return;
        }

        отчетна€‘орма = (ќтчетна€‘ормаƒанных)ћенеджер—ессионныхѕеременных.ѕолучитьѕеременную»з—ессии(»дентификатор‘ормы, »м€ѕеременной);

        this.Ќабор“аблиц‘ормы_субтаблица.Sheets.Clear();

        ƒинамическа€“аблица таблица = «агрузить“аблицу(отчетна€‘орма, —убтаблица, »дентификатор‘ормы);
        if (таблица != null)
        {
            this.Ќабор“аблиц‘ормы_субтаблица.ƒобавить“аблицу(таблица);
        }

        if (таблица.“аблицаћетаструктуры != null)
        {
            if (!string.IsNullOrEmpty(таблица.Ќаименование))
            {
                this.«аголовок—траницы = таблица.Ќаименование;
            }
            if (!string.IsNullOrEmpty(таблица.“аблицаћетаструктуры.Ќаименование))
            {
                this.«аголовок—траницы = таблица.“аблицаћетаструктуры.Ќаименование;
            }
            else
            {
                this.«аголовок—траницы = —убтаблица;
            }
        }
        else
        {
            this.«аголовок—траницы = —убтаблица;
        }

        if (отчетна€‘орма.¬ариантќткрыти€Ёкранной‘ормы == Ѕарс.—воды.ќтчетна€‘орма.¬ариантќткрыти€Ёкранной‘ормы.„тение)
        {
            RadMenuItem1.Visible = false;
            RadMenuItem2.Visible = false;

             нопка_ќ .Visible = false;
             нопка_ѕересчитать.Visible = false;
        }
        else
        {
            this.ѕодтвердить«акрытие = true;
        }
    }
    
    #endregion

    #region ћетоды

    private ƒинамическа€“аблица «агрузить“аблицу(ќтчетна€‘ормаƒанных ќтчетна€‘орма, string  од“аблицы, string »дентификаторЁкранной‘ормы)
    {
        if (ќтчетна€‘орма == null)
        {
            return null;
        }

        string путь ‘айлуЁкранной‘ормы = ѕровайдер‘айлов‘ормы.ѕолучитьѕуть ‘айлуЁкранной‘ормы(ќтчетна€‘орма.ћетаструктура.»дентификатор);

        XPathDocument doc = new XPathDocument(путь ‘айлуЁкранной‘ормы);

        XPathNavigator nav = doc.CreateNavigator();

        XPathNavigator навигатор = nav.SelectSingleNode(string.Format("./Ёкранна€‘орма/ƒинамическа€“аблица[@ од='{0}']",  од“аблицы));

        if (навигатор == null)
            return null;
        
        string  одƒинамической“аблицы = навигатор.GetAttribute(" од", "");
        string Ќаименованиеƒинамической“аблицы = навигатор.GetAttribute("Ќаименование", "");
        string »м€Ћистаƒинамической“аблицы = навигатор.GetAttribute("»м€Ћиста", "");

        ƒинамическа€“аблица динамическа€“аблица = null;

        if (ќтчетна€‘орма.ћетаструктура != null && ќтчетна€‘орма.ћетаструктура.“аблицы.ContainsKey( одƒинамической“аблицы))
        {
            “аблицаћетаструктуры таблицаћетаструктуры = ќтчетна€‘орма.ћетаструктура.“аблицы[ одƒинамической“аблицы];
            “аблицаƒанных таблицаƒанных = ќтчетна€‘орма.ƒанные[ одƒинамической“аблицы];

            динамическа€“аблица = new ƒинамическа€“аблица(таблицаћетаструктуры, таблицаƒанных);
        }
        else
        {
            динамическа€“аблица = new ƒинамическа€“аблица();
        }

        динамическа€“аблица.SheetName = string.IsNullOrEmpty(Ќаименованиеƒинамической“аблицы) ?  одƒинамической“аблицы : Ќаименованиеƒинамической“аблицы;
        динамическа€“аблица.¬ариантќткрыти€Ёкранной‘ормы = ќтчетна€‘орма.¬ариантќткрыти€Ёкранной‘ормы;

        динамическа€“аблица.»дентификаторЁкранной‘ормы = »дентификаторЁкранной‘ормы;

        динамическа€“аблица.«агрузить»зXML(навигатор.CreateNavigator());

        return динамическа€“аблица;
    }

    private bool ѕроверить орректностьƒанных(ref List<—трокаќтчета—веркиƒанных> списокќшибок«аполнени€,
            ref int количествоќшибок, ref int количествоѕредупреждений)
    {
        if (списокќшибок«аполнени€ == null)
        {
            списокќшибок«аполнени€ = new List<—трокаќтчета—веркиƒанных>();
        }

        bool сохранить = true;

        Dictionary<string, List<string>> координатыЌезаполненных—трок =
            new Dictionary<string, List<string>>();

        ƒинамическа€“аблица динамическа€“аблица = (this.Ќабор“аблиц‘ормы_субтаблица.Sheets[0] as ƒинамическа€“аблица);

        if (!динамическа€“аблица.ѕроверить«аполненностьƒанных(out координатыЌезаполненных—трок))
        {
            foreach (KeyValuePair<string, List<string>> строка—верки in координатыЌезаполненных—трок)
            {
                foreach (string строка in строка—верки.Value)
                {
                    —трокаќтчета—веркиƒанных ошибка = new —трокаќтчета—веркиƒанных();
                    ошибка.‘орма = динамическа€“аблица.“аблицаћетаструктуры.Ќаименование;
                    ошибка.—толбец = строка—верки.Key;
                    ошибка.—трока = строка;
                    ошибка.—убтаблица = динамическа€“аблица.SheetName;
                    ошибка.“ипќшибки = "Ќезаполненна€ €чейка";
                    ошибка.—охранение–азрешено = false;

                    списокќшибок«аполнени€.Add(ошибка);
                }
            }

        }

        списокќшибок«аполнени€.AddRange(динамическа€“аблица.“аблицаƒанных.ћатрица«начений.ѕроверить”никальность—трок());

        if (динамическа€“аблица.“аблицаƒанных.ƒанные‘ормы.»дентификатор. омпонентќтчетногоѕериода.ќтчетныйѕериод.ƒатаЌачала >=  онвертер.¬ƒату("01.01.2009"))
        {
            —верка лассификаторов сверка лассификаторов =  отчетна€‘орма.ѕолучитьќбъект—верки лассификаторов();
            сверка лассификаторов.ѕровер€тьЌаѕустоту = false;
            сверка лассификаторов.”дал€тьЌеверные—троки = false;

            списокќшибок«аполнени€.AddRange(сверка лассификаторов.ѕроверить(динамическа€“аблица.“аблицаƒанных));
        }
        
        foreach (—трокаќтчета—веркиƒанных строка—верки in списокќшибок«аполнени€)
        {
            if (строка—верки.—охранение–азрешено)
            {
                количествоѕредупреждений++;
            }
            else
            {
                количествоќшибок++;
                сохранить = false;
            }
        }
        return сохранить;
    }

    private –езультаты¬ыполнени€—веркиƒанных —оздать–езультат¬ыполнени€—веркиƒанных(List<—трокаќтчета—веркиƒанных> списокќшибок«аполнени€, string заголовок,string подзаголовок)
    {
        –езультаты¬ыполнени€—веркиƒанных результат—верки = new –езультаты¬ыполнени€—веркиƒанных();

        результат—верки.«аголовок = заголовок;
        результат—верки.ѕодзаголовок = подзаголовок;

        результат—верки.—троки—верки.AddRange(списокќшибок«аполнени€);

        результат—верки.—бросить—писок—толбцов();

        результат—верки.ƒобавитьќтображаемый—толбец("“аблица", "—убтаблица");
        результат—верки.ƒобавитьќтображаемый—толбец("—толбец", "—толбец");
        результат—верки.ƒобавитьќтображаемый—толбец("—трока", "—трока");
        результат—верки.ƒобавитьќтображаемый—толбец("”словие", "”словие");
        результат—верки.ƒобавитьќтображаемый—толбец("ќшибка", "“ипќшибки");
        результат—верки.ƒобавитьќтображаемый—толбец("—охранение разрешено", "—охранение–азрешено");
        return результат—верки;
    } 

    #endregion

    #region  нопки

    protected void  нопка_ќ _Click(object sender, EventArgs e)
    {
        this.Ќабор“аблиц‘ормы_субтаблица.SaveChanges();

        ƒинамическа€“аблица динамическа€“аблица = (this.Ќабор“аблиц‘ормы_субтаблица.Sheets[0] as ƒинамическа€“аблица);

        динамическа€“аблица.ќбновитьƒанныеѕоЁкранной‘орме();

        динамическа€“аблица.—охранитьƒанные();

        ¬ыставл€ть–азмерыќкна = false;

        List<—трокаќтчета—веркиƒанных> списокќшибок«аполнени€ = new List<—трокаќтчета—веркиƒанных>();
        
        int количествоќшибок = 0;
        int количествоѕредупреждений = 0;

        if (!this.ѕроверить орректностьƒанных(ref списокќшибок«аполнени€,
                        ref количествоќшибок, ref количествоѕредупреждений))
        {
            –езультаты¬ыполнени€—веркиƒанных результат—верки = 
                —оздать–езультат¬ыполнени€—веркиƒанных(списокќшибок«аполнени€, 
                string.Format("¬о врем€ проверки данных были обнаружены ошибки и предупреждени€ (количество ошибок: {0}, количество предупреждений: {1})",количествоќшибок, количествоѕредупреждений),
                "“ак как таблица содержит ошибки, таблица сохранена не будет.");

            ћенеджер—ессионныхѕеременных.—охранитьѕеременную¬—ессии(this.»дентификатор, "–езультат—верки", результат—верки);

            this.Controls.Add(new LiteralControl(
                string.Format("<script type=\"text/javascript\">ShowCompareForm( '{0}:{1}' );</script>",
                    this.»дентификатор, "–езультат—верки")));
        }
        else
        {
            if (списокќшибок«аполнени€ != null && списокќшибок«аполнени€.Count > 0)
            {
                –езультаты¬ыполнени€—веркиƒанных результат—верки =
                    —оздать–езультат¬ыполнени€—веркиƒанных(списокќшибок«аполнени€,
                    string.Format("¬о врем€ проверки данных были обнаружены предупреждени€ (количество предупреждений: {0})", количествоѕредупреждений),
                    "“ак как таблица содержит только предупреждени€, таблица будет сохранена.");
                
                //сохран€ем в сессию родительского окна,т.к. текущее окно будет закрыто
                if (ѕараметры√лавногоќкна.ѕараметр«адан("SessionParam"))
                {
                    string SessionParam = ѕараметры√лавногоќкна["SessionParam"];

                    string[] SessionParams = SessionParam.Split(':');

                    string »дентификатор‘ормы = SessionParams[0];

                    ћенеджер—ессионныхѕеременных.—охранитьѕеременную¬—ессии(»дентификатор‘ормы, "–езультат—верки", результат—верки);

                    Controls.Add(new LiteralControl(
                    string.Format("<script type=\"text/javascript\">CloseFormAndShowLog('{0}:{1}' );</script>", »дентификатор‘ормы, "–езультат—верки")));
                }

                 
            }
            else
            {
                Controls.AddAt(3, new LiteralControl("<script type=\"text/javascript\">CloseAndRebindSheet();</script>"));
            }
              
        }

        return;
    }

    protected void  нопка_ѕересчитать_Click(object sender, EventArgs e)
    {
        this.Ќабор“аблиц‘ормы_субтаблица.SaveChanges();

        ƒинамическа€“аблица динамическа€“аблица = (this.Ќабор“аблиц‘ормы_субтаблица.Sheets[0] as ƒинамическа€“аблица);

        динамическа€“аблица.ѕересчитатьјвтоблоки();
    }

    #endregion

    

    
    
            
}
