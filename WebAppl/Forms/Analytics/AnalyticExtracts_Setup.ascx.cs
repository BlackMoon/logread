using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections.Generic;

using Ѕарс;
using Ѕарс.ядро;
using Ѕарс.¬ебядро;
using Ѕарс.¬ебядро.»нтерфейс;
using Ѕарс.—воды;

public partial class Forms_Analytics_AnalyticExtracts_Setup : ¬еб‘орма
{
    public Forms_Analytics_AnalyticExtracts_Setup()
        : base()
    {
        this.Ўиринаќкна = 750;
        this.¬ысотаќкна = 350;
        this.«аголовок—траницы = "—борка аналитической выборки";

        this.ѕри«агрузке—траницы += new Ѕарс.»нтерфейс.ќбработчик—обыти€(Forms_Analytics_AnalyticExtracts_Setup_ѕри«агрузке—траницы);
    }

    void Forms_Analytics_AnalyticExtracts_Setup_ѕри«агрузке—траницы(object ќтправитель, Ѕарс.»нтерфейс.јргументы—обыти€ јргументы)
    {
        if (!IsPostBack)
        {
            Ќадпись_предыдуща€—борка.Text = "нет данных";
             нопка_посмотретьѕредыдущую—борку.Enabled = false;

            if (ѕараметры√лавногоќкна.ѕараметр«адан("Params"))
            {
                int DataSourceIndex = int.Parse(ѕараметры√лавногоќкна["Params"]);

                —писокќписанийѕроизвольных¬ыборок списокќписанийѕроизвольных¬ыборок = Session["AnalyticExtractsDataSource"] as —писокќписанийѕроизвольных¬ыборок;

                ќписаниеѕроизвольной¬ыборки описаниеѕроизвольной¬ыборки = списокќписанийѕроизвольных¬ыборок[DataSourceIndex];
                
                Session["AnalyticExtract"] = описаниеѕроизвольной¬ыборки;
            }

            if (Session["AnalyticExtract"] != null && Session["AnalyticExtract"] is ќписаниеѕроизвольной¬ыборки)
            {
                {
                    ќписаниеѕроизвольной¬ыборки описаниеѕроизвольной¬ыборки = Session["AnalyticExtract"] as ќписаниеѕроизвольной¬ыборки;

                    ѕровайдерѕроизвольной¬ыборки провайдерѕроизвольной¬ыборки = new ѕровайдерѕроизвольной¬ыборки(описаниеѕроизвольной¬ыборки);
                    провайдерѕроизвольной¬ыборки.«агрузитьћетаданные();

                    ‘лажок_показать¬се_CheckedChanged(null, null);
                   
                    Ќадпись_аналитическа€¬ыборка.Text = описаниеѕроизвольной¬ыборки.Ќаименование;
                }
                
            }
        }
    }

    protected void ‘лажок_показать¬се_CheckedChanged(object sender, EventArgs e)
    {
        // ѕостроение источника записей выбора из справочника
        if (!‘лажок_показать¬се.Checked)
        {
            ќписаниеѕроизвольной¬ыборки описаниеѕроизвольной¬ыборки = Session["AnalyticExtract"] as ќписаниеѕроизвольной¬ыборки;

            —писокѕрив€занных омпонентовќтчетногоѕериода списокѕрив€занных омпонентовќтчетногоѕериода = new —писокѕрив€занных омпонентовќтчетногоѕериода(описаниеѕроизвольной¬ыборки);
            списокѕрив€занных омпонентовќтчетногоѕериода.«агрузить();

            if (описаниеѕроизвольной¬ыборки.—боркаѕоќтчетномуѕериоду)
            {
                List<ќтчетныйѕериод> списокќтчетныхѕериодов = new List<ќтчетныйѕериод>();

                foreach (ѕрив€занный омпонентќтчетногоѕериода прив€занный омпонент in списокѕрив€занных омпонентовќтчетногоѕериода)
                {
                    if (прив€занный омпонент. омпонентќтчетногоѕериода != null
                        && прив€занный омпонент. омпонентќтчетногоѕериода.ќтчетныйѕериод != null)
                    {
                        списокќтчетныхѕериодов.Add(прив€занный омпонент. омпонентќтчетногоѕериода.ќтчетныйѕериод);
                    }
                }

                ¬ыпадающий—писок_отчетныеѕериоды.»сточник«аписей = списокќтчетныхѕериодов;
            }
            else
            {
                List< омпонентќтчетногоѕериода> список омпонентовќтчетногоѕериода = new List< омпонентќтчетногоѕериода>();

                foreach (ѕрив€занный омпонентќтчетногоѕериода прив€занный омпонент in списокѕрив€занных омпонентовќтчетногоѕериода)
                {
                    if (прив€занный омпонент. омпонентќтчетногоѕериода != null)
                    {
                        список омпонентовќтчетногоѕериода.Add(прив€занный омпонент. омпонентќтчетногоѕериода);
                    }
                }

                ¬ыпадающий—писок_отчетныеѕериоды.»сточник«аписей = список омпонентовќтчетногоѕериода;
            }

            
        }
        else
        {
            ¬ыборка< омпонентќтчетногоѕериода> выборка омпонентовќтчетногоѕериода = new ¬ыборка< омпонентќтчетногоѕериода>();
            выборка омпонентовќтчетногоѕериода.«апрос¬ыборки.ƒобавить”ровень—ортировки("ќтчетныйѕериод");
            выборка омпонентовќтчетногоѕериода.«агрузить();

            ¬ыпадающий—писок_отчетныеѕериоды.»сточник«аписей = выборка омпонентовќтчетногоѕериода;
            ¬ыпадающий—писок_отчетныеѕериоды.DataBind();
        }

        —толбец¬ыпадающего—писка столбец_Ќаименование = new —толбец¬ыпадающего—писка();
        ¬ыпадающий—писок_отчетныеѕериоды.ƒобавить—толбец(столбец_Ќаименование);
        столбец_Ќаименование.»м€ѕол€»сточникаƒанных = "Ќаименование";
        столбец_Ќаименование.«аголовок = "Ќаименование";
        столбец_Ќаименование.Ўирина—толбца = 200;

        —толбец¬ыпадающего—писка столбец_ѕериод = new —толбец¬ыпадающего—писка();
        ¬ыпадающий—писок_отчетныеѕериоды.ƒобавить—толбец(столбец_ѕериод);
        столбец_ѕериод.»м€ѕол€»сточникаƒанных = "ќтчетныйѕериод—трокой";
        столбец_ѕериод.«аголовок = "ќтчетный период";
        столбец_ѕериод.Ўирина—толбца = 200;

        ¬ыпадающий—писок_отчетныеѕериоды.DataBind();

        ¬ыпадающий—писок_отчетныеѕериоды.SelectedIndex = 0;
    }

    protected void ¬ыпадающий—писок_отчетныеѕериоды_SelectedIndexChanged(object sender, Telerik.WebControls.RadComboBoxSelectedIndexChangedEventArgs e)
    {
        if (Session["AnalyticExtract"] != null && Session["AnalyticExtract"] is ќписаниеѕроизвольной¬ыборки)
        {
            ќписаниеѕроизвольной¬ыборки описаниеѕроизвольной¬ыборки = Session["AnalyticExtract"] as ќписаниеѕроизвольной¬ыборки;
            
            Ќадпись_предыдуща€—борка.Text = "нет данных";

            if (описаниеѕроизвольной¬ыборки.“ипѕроизвольной¬ыборки == “ипѕроизвольной¬ыборки.—истемный
                && описаниеѕроизвольной¬ыборки.’ранимоеќписание != null)
            {
                 омпонентќтчетногоѕериода компонентќтчетногоѕериода = null;

                if (описаниеѕроизвольной¬ыборки.—боркаѕоќтчетномуѕериоду)
                {
                    ќтчетныйѕериод отчетныйѕериод = (ќтчетныйѕериод)¬ыпадающий—писок_отчетныеѕериоды.¬ыбранныйќбъект;

                    if (отчетныйѕериод != null && отчетныйѕериод. омпоненты. оличество«аписей > 0)
                    {
                        компонентќтчетногоѕериода = отчетныйѕериод. омпоненты[0];
                    }
                }
                else
                {
                    компонентќтчетногоѕериода = ( омпонентќтчетногоѕериода)¬ыпадающий—писок_отчетныеѕериоды.¬ыбранныйќбъект;
                }

                if (компонентќтчетногоѕериода != null)
                {
                    foreach (ќписаниеOLAP уба описание уба in описаниеѕроизвольной¬ыборки.’ранимоеќписание.ќписани€ убов)
                    {
                        if (описание уба. омпонентќтчетногоѕериода == компонентќтчетногоѕериода)
                        {
                            Ќадпись_предыдуща€—борка.Text = описание уба.ƒатаѕоследнего»зменени€ќбъекта.ToString();
                             нопка_посмотретьѕредыдущую—борку.Enabled = true;

                            break;
                        }
                    }
                }
            }
        }
    }

    protected void  нопка_отмена_Click(object sender, EventArgs e)
    {
        Controls.AddAt(1, new LiteralControl("<script type=\"text/javascript\">Close();</script>"));
        this.¬ыставл€ть–азмерыќкна = false;
    }

    protected void  нопка_собрать_Click(object sender, EventArgs e)
    {
        —обрать(true);
    }

    protected void  нопка_посмотретьѕредыдущую—борку_Click(object sender, EventArgs e)
    {
        —обрать(false);
    }

    private void —обрать(bool собрать«аново)
    {
        if (Session["AnalyticExtract"] != null && Session["AnalyticExtract"] is ќписаниеѕроизвольной¬ыборки)
        {
            ќписаниеѕроизвольной¬ыборки описаниеѕроизвольной¬ыборки = Session["AnalyticExtract"] as ќписаниеѕроизвольной¬ыборки;

            if (описаниеѕроизвольной¬ыборки.—боркаѕоќтчетномуѕериоду)
            {
                ќтчетныйѕериод отчетныйѕериод = (ќтчетныйѕериод)¬ыпадающий—писок_отчетныеѕериоды.¬ыбранныйќбъект;

                if (отчетныйѕериод != null)
                {
                    описаниеѕроизвольной¬ыборки.ќтчетныйѕериод = отчетныйѕериод;
                }
            }
            else
            {
                 омпонентќтчетногоѕериода компонентѕериода = ( омпонентќтчетногоѕериода)¬ыпадающий—писок_отчетныеѕериоды.¬ыбранныйќбъект;

                if (компонентѕериода != null)
                {
                    List< омпонентќтчетногоѕериода> компоненты—борки = new List< омпонентќтчетногоѕериода>();
                    компоненты—борки.Add( компонентѕериода );

                    описаниеѕроизвольной¬ыборки.—писок омпонентовќтчетногоѕериода = компоненты—борки;
                }
            }

            Session["BuildAnew"] = собрать«аново;

            Controls.AddAt(1, new LiteralControl("<script type=\"text/javascript\">RedirectWindow('Forms/Analytics/AnalyticExtracts_View.ascx');</script>"));

            this.¬ыставл€ть–азмерыќкна = false;
        }
    }

}
