using System;
using System.Data;
using System.Diagnostics;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using Telerik.WebControls;

using Ѕарс.¬ебядро.»нтерфейс;
using Ѕарс.¬ебядро;

using Ѕарс.—воды;
using Ѕарс.—воды.ќтчетна€‘орма;
using Ѕарс.—воды.¬ебЅраузерќтчетных‘орм;
using Ѕарс.—воды.јргументы—обытийќтчетной‘ормы;
using Ѕарс.—воды.“ипыячеек;
using Ѕарс;

namespace WebAppl.Forms.Dictionary
{
    public partial class Dictionary : √лавное¬ебќкно
    {
        #region  онструктор
        public Dictionary()
            : base()
        {

        }
        #endregion

        #region ћетоды жизненного цикла страницы

        protected override void »нициализаци€ќкна()
        {
            ѕолучить оординатыячейки();
            tree.NodeClick += new RadTreeView.RadTreeViewEventHandler(tree_NodeClick);
        }
        
        protected override void –ендерќкна()
        {
            ѕостроитьƒерево«аписей—правочника(null, null);

            if (множественный¬ыбор)
            {
                »нициализироватьћножественный¬ыбор();
            }
        }

        #endregion

        #region —войства и пол€
        
        public string »дентификатор
        {
            get
            {
                if (ѕараметры != null)
                {
                    return ѕараметры.ѕараметр«адан("ID") ? ѕараметры["ID"] : string.Empty;
                }

                return string.Empty;
            }
        }

        private string шапка—траницы = string.Empty;
        
        public string Ўапка—траницы
        {
            get
            {
                return шапка—траницы;
            }
            set
            {
                шапка—траницы = value;
            }
        }

        public string «аголовок—траницы
        {
            get
            {
                return Title;
            }
            set
            {
                Title = value;
            }
        }
        
        private –ежимы¬ыбораЁлементов—правочника режим¬ыбора«аписей
        {
            get
            {
                return (–ежимы¬ыбораЁлементов—правочника)ViewState["–ежим¬ыбораЁлементов—правочника"];
            }
            set
            {
                ViewState["–ежим¬ыбораЁлементов—правочника"] = value;
            }
        }

        private IList<«апись—правочника> список«аписей
        {
            get
            {
                return (IList<«апись—правочника>)ћенеджер—ессионныхѕеременных.ѕолучитьѕеременную»з—ессии(this.»дентификатор, "—писок«аписей");
            }
            set
            {
                ћенеджер—ессионныхѕеременных.—охранитьѕеременную¬—ессии(this.»дентификатор, "—писок«аписей", value);
            }
        }

        private List<Guid> списокЁлементов—ƒочерними = null;

        private Dictionary<Guid, «апись—правочника> словарь«аписей—правочника = null;
        
        private bool множественный¬ыбор = false;

        string[] параметрыќкна;
        string  оординатыячейки = "";
        string код—троки = "";
        string код—толбца = "";
        string »дентификатор“аблицы = "";
        string[] координаты;

        #endregion

        #region »нициализаци€ дерева
        
        private void »нициализироватьћножественный¬ыбор()
        {
            
            tree.CheckBoxes = true;             
             нопка_выбрать.Visible = true;
            tree.Attributes.Remove("BeforeClientDoubleClick");
            tree.Attributes.Add("DisableChildNodes", "true");
        }

        private void ѕолучить оординатыячейки()
        {
            if (ѕараметры != null && ѕараметры.ѕараметр«адан("Params"))
            {
                 параметрыќкна = ѕараметры["Params"].Split(',');
                  оординатыячейки = параметрыќкна[0];
                 код—троки = "";
                 код—толбца = "";
                 »дентификатор“аблицы = параметрыќкна[1];
                 координаты =  оординатыячейки.Split(':');
            }
        }

        void ѕостроитьƒерево«аписей—правочника(object sender, EventArgs e)
        {
            if (!IsPostBack || /*«атычка дл€ 110*/ViewState["рез¬идƒе€т"] != null)
            {
                режим¬ыбора«аписей = –ежимы¬ыбораЁлементов—правочника.¬се;
                список«аписей = new List<«апись—правочника>();

                if (ѕараметры != null && ѕараметры.ѕараметр«адан("Params"))
                {
                    
                    ќтчетна€‘ормаƒанных форма = ѕолучитьќтчетную‘орму();
                    ќписание—сылкиЌа—правочник описание = null;
                    “аблицаƒанных таблицаƒанных = null;

                    if (форма != null)
                    {
                        ћетаструктура‘ормы мета = форма.ћетаструктура;

                        
                        
                        if (координаты.Length == 2)
                        {
                            //мы в свободной €чеейке статической таблицы
                            код—толбца = координаты[0];
                            таблицаƒанных = null;

                            if (мета.—вободныеячейки.ContainsKey(координаты[0]))
                            {
                                ячейкаћетаструктуры €чейка = мета.—вободныеячейки[координаты[0]];
                            
                                if (€чейка.“ип«начени€ == typeof(ћножественна€—сылкаЌа—правочник))
                                {
                                    множественный¬ыбор = true;
                                    описание = new Ѕарс.—воды.“ипыячеек.ќписаниећножественной—сылкиЌа—правочник(€чейка.ќписание);
                                } 
                                else
                                {
                                    описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(€чейка.ќписание);
                                }
                            }
                        }
                        if (координаты.Length == 4)
                        {
                            //мы в обычной €чейке статической таблицы
                            код—толбца = координаты[1];
                            код—троки = координаты[2];

                            “аблицаћетаструктуры таблица = мета.“аблицы[координаты[0]];

                            ячейкаћетаструктуры €чейка = таблица[код—толбца,код—троки];
                            if (€чейка.“ип«начени€ == typeof(ћножественна€—сылкаЌа—правочник))
                            {
                               множественный¬ыбор = true;
                               описание = new Ѕарс.—воды.“ипыячеек.ќписаниећножественной—сылкиЌа—правочник(€чейка.ќписание);
                            }
                            else
                            {
                                описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(€чейка.ќписание);
                            }
                            
                        
                        }
                        else
                        {
                            //мы в динамической таблице
                            if (форма.ƒанные.“аблицы.ContainsKey(координаты[0]))
                            {
                                таблицаƒанных = форма.ƒанные.“аблицы[координаты[0]];
                            }

                            if (мета.“аблицы.ContainsKey(координаты[0]))
                            {
                                “аблицаћетаструктуры таблица = мета.“аблицы[координаты[0]];

                                код—толбца = координаты[1];
                                if (координаты.Length >= 3)
                                {
                                    код—троки = координаты[2];
                                }

                                if (таблица.—вободныеячейки.ContainsKey(координаты[1]))
                                {
                                    ячейкаћетаструктуры €чейка = таблица.—вободныеячейки[координаты[1]];
                                    описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(€чейка.ќписание);
                                }
                                else if (таблица.—толбцы.ContainsKey(координаты[1]))
                                {
                                    —толбецћетаструктуры столбец = таблица.—толбцы[координаты[1]];
                                    if (столбец.“ип == typeof(ћножественна€—сылкаЌа—правочник))
                                    {
                                        множественный¬ыбор = true;
                                        описание = new Ѕарс.—воды.“ипыячеек.ќписаниећножественной—сылкиЌа—правочник(столбец.ќписание);
                                    }
                                    else
                                    {
                                        описание = new Ѕарс.—воды.“ипыячеек.ќписание—сылкиЌа—правочник(столбец.ќписание);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        this.Ўапка—траницы = "Ќевозможно определить отчетную форму.";
                        return;
                    }

                    if (описание == null)
                    {
                        this.Ўапка—траницы = "Ќе задано описание ссылки на справочник.";
                        return;
                    }

                    this.«аголовок—траницы = string.Format("—правочник {0}", описание. од—правочника);

                    object объектƒл€¬ыбора«аписей = null;

                    if (описание.ƒополнительна€ќбработкаѕолучени€»сточника«аписей)
                    {
                        јргументы—обыти€ѕолучени€»сточника«аписейƒл€¬ыбора»з—правочника јргументы—обыти€ = new јргументы—обыти€ѕолучени€»сточника«аписейƒл€¬ыбора»з—правочника();
                        јргументы—обыти€.ќтменить¬ыбор = false;
                        јргументы—обыти€.“аблицаƒанных = таблицаƒанных;
                        јргументы—обыти€. од—толбца = код—толбца;
                        јргументы—обыти€. од—троки = код—троки;
                        јргументы—обыти€.ќписание—сылки = описание;

                        try
                        {
                            объектƒл€¬ыбора«аписей = форма.¬ыполнитьћетодћакроса("ѕолучить»сточник«аписейƒл€¬ыбора»з—правочника", new object[] { јргументы—обыти€ });
                        }
                        catch (Exception ex)
                        {
                            this.Ўапка—траницы = "ќшибка формировани€ записей справочника : " + ex.Message + "\r\n\r\n" + ex.StackTrace;
                            return;
                        }

                        if (јргументы—обыти€.ќтменить¬ыбор)
                        {
                            this.Ўапка—траницы = "¬ыбор из справочника был отменен.";
                            return;
                        }

                    }
                    if (описание. од—правочника.StartsWith("Ѕюджетна€ќтчетность.###‘орма110‘ќ"))
                    {
                        ќсобенность“екущей‘ормы = “ип‘ормы.‘орма111‘ќ;
                        ¬ыборќбъекта Ѕ ќт—чета‘ќ(ref объектƒл€¬ыбора«аписей,форма. омпонентќтчетногоѕериода.ќтчетныйѕериод.ƒатаЌачала);
                    }
                    else if (описание. од—правочника.StartsWith("Ѕюджетна€ќтчетность.###‘орма110"))
                    {
                        ќсобенность“екущей‘ормы = “ип‘ормы.‘орма110;
                        ¬ыборќбъекта Ѕ ќт—чета(ref объектƒл€¬ыбора«аписей, форма. омпонентќтчетногоѕериода.ќтчетныйѕериод.ƒатаЌачала);

                    }
                    else
                    {
                        ќсобенность“екущей‘ормы = “ип‘ормы.ќбычна€‘орма;
                    }


                    if (объектƒл€¬ыбора«аписей == null)
                    {
                        »дентификатор”ниверсального—правочника идентификатор—правочника = new »дентификатор”ниверсального—правочника();
                        идентификатор—правочника.ѕолноеЌаименование—правочника = описание. од—правочника;

                        ”ниверсальный—правочник справочник = ”ниверсальный лассификатор.ѕолучить—правочникѕо»дентификатору(идентификатор—правочника, true);

                        if (справочник == null)
                        {
                            this.Ўапка—траницы = "”казанный справочник не существует.";
                            return;
                        }

                        справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки("–одительскийЁлемент");
                        справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки(" од");
                        
                        справочник.«аписи.«апрос¬ыборки.ƒополнительное”словиеќтбора = Ѕарс.‘ильтрЌа«аписи—правочника.ѕолучить”словие‘ильтрации(описание.‘ильтр);

                        справочник.«аписи.“ребуетс€ѕерезагрузка = true;
                        справочник.«аписи.«агрузитьѕолностью();

                        справочник.ѕостроить—ловарь«аписей();

                        объектƒл€¬ыбора«аписей = справочник;
                    }

                    if (объектƒл€¬ыбора«аписей != null)
                    {
                        if (объектƒл€¬ыбора«аписей is ¬ыбор»з”ниверсального—правочника)
                        {
                            if ((объектƒл€¬ыбора«аписей as ¬ыбор»з”ниверсального—правочника).—правочник != null)
                            {
                                режим¬ыбора«аписей = (объектƒл€¬ыбора«аписей as ¬ыбор»з”ниверсального—правочника).—правочник.–ежим¬ыбораЁлементов;
                            }

                            список«аписей = (объектƒл€¬ыбора«аписей as ¬ыбор»з”ниверсального—правочника).—писок«аписей;
                        }
                        else if (объектƒл€¬ыбора«аписей is »нтерфейс—писка’ранимыхќбъектов)
                        {
                            список«аписей = (IList<«апись—правочника>)(объектƒл€¬ыбора«аписей as »нтерфейс—писка’ранимыхќбъектов).¬ыборкаќбъектов;
                        }
                        else if (объектƒл€¬ыбора«аписей is IList<«апись—правочника>)
                        {
                            список«аписей = (объектƒл€¬ыбора«аписей as IList<«апись—правочника>);
                        }
                        else if (объектƒл€¬ыбора«аписей is ”ниверсальный—правочник)
                        {
                            ”ниверсальный—правочник справочник = (объектƒл€¬ыбора«аписей as ”ниверсальный—правочник);
                            справочник.ѕостроить—ловарь«аписей();

                            режим¬ыбора«аписей = справочник.–ежим¬ыбораЁлементов;

                            if (описание != null && описание.–ежим¬ыбора”казан)
                            {
                                // ќписание приоритетней
                                режим¬ыбора«аписей = описание.–ежим¬ыбора;
                            }

                            список«аписей = справочник.«аписи;
                            // словарь«аписей = справочник.—ловарь«аписей;
                        }
                    }

                    if ((список«аписей == null) || (список«аписей.Count == 0))
                    {
                        this.Ўапка—траницы = "Ќет записей дл€ выбора";
                        return;
                    }
                    else if ((словарь«аписей—правочника == null) || (словарь«аписей—правочника.Count == 0))
                    {
                        словарь«аписей—правочника = new Dictionary<Guid, «апись—правочника>();

                        for (int index = 0; index < список«аписей.Count; index++)
                        {
                            «апись—правочника запись = список«аписей[index];

                            if (!словарь«аписей—правочника.ContainsKey(запись.»дентификаторќбъекта))
                            {
                                словарь«аписей—правочника.Add(запись.»дентификаторќбъекта, запись);
                            }
                        }
                    }
                }
                else if (ѕараметры.ѕараметр«адан("Dictionary"))
                {
                    string  од—правочника = ѕараметры["Dictionary"];

                    this.«аголовок—траницы = string.Format("—правочник {0}",  од—правочника);

                    »дентификатор”ниверсального—правочника идентификатор—правочника = new »дентификатор”ниверсального—правочника();
                    идентификатор—правочника.ѕолноеЌаименование—правочника =  од—правочника;

                    ”ниверсальный—правочник справочник = ”ниверсальный лассификатор.ѕолучить—правочникѕо»дентификатору(идентификатор—правочника, true);

                    if (справочник == null)
                    {
                        this.Ўапка—траницы = "”казанный справочник не существует.";
                        return;
                    }

                    справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки("–одительскийЁлемент");
                    справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки(" од");

                    справочник.«аписи.“ребуетс€ѕерезагрузка = true;
                    справочник.«аписи.«агрузитьѕолностью();

                    справочник.ѕостроить—ловарь«аписей();

                    режим¬ыбора«аписей = справочник.–ежим¬ыбораЁлементов;
                    список«аписей = справочник.«аписи;
                    // словарь«аписей = справочник.—ловарь«аписей;
                }
                else
                {
                    this.Ўапка—траницы = "Ќе задан справочник.";
                    return;
                }

                tree.DataFieldID = "»дентификаторќбъекта";
                tree.DataFieldParentID = "»дентификатор–одительской«аписи";
                tree.DataTextField = "Ќаименование";
                tree.DataValueField = " од";

                if (список«аписей.Count > 500 )
                {
                    if (tree.Nodes.Count == 0)
                    {
                        List<«апись—правочника> список = ѕолучить«начени€—правочника(null);

                        foreach («апись—правочника запись in список)
                        {
                            RadTreeNode node = new RadTreeNode();

                            node.Text = запись.ѕолноеЌаименование«аписи;
                            node.Value = запись. од;

                            if (списокЁлементов—ƒочерними.Contains(запись.»дентификаторќбъекта))
                            {
                                if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.Ќе√рупповые)
                                {
                                    node.Attributes.Add("Disable", "true");
                                    node.Checkable = false;
                                    node.CssClass = "Disabled";
                                }

                                node.ExpandMode = ExpandMode.ServerSide;
                            }
                            else
                            {
                                if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.√рупповые)
                                {
                                    node.Attributes.Add("Disable", "true");
                                    node.Checkable = false;
                                    node.CssClass = "Disabled";
                                }

                                node.ExpandMode = ExpandMode.ClientSide;

                            }

                            tree.Nodes.Add(node);
                        }
                    }
                }
                else
                {
                    tree.DataSource = —оздать“аблицу();
                    tree.NodeBound += new RadTreeView.RadTreeViewEventHandler(tree_NodeBound);
                    tree.DataBind();
                }
            }
        }

        #endregion 

        #region —обыти€
        
        protected void tree_NodeBound(object o, RadTreeNodeEventArgs e)
        {
            RadTreeNode node = e.NodeBound;

            DataRowView dataSourceRow = (DataRowView)node.DataItem;

            Guid идентификатор«аписи = Guid.Empty;

            string row = dataSourceRow["»дентификаторќбъекта"].ToString();

            if (!string.IsNullOrEmpty(row))
            {
                идентификатор«аписи = new Guid(row);
            }

            «апись—правочника запись = null;

            if ((словарь«аписей—правочника != null) && словарь«аписей—правочника.ContainsKey(идентификатор«аписи))
            {
                запись = словарь«аписей—правочника[идентификатор«аписи];
            }

            if (запись.–ежим¬ыбора == –ежим¬ыбораЁлемента—правочника.ќпредел€етс€—правочником)
            {

                if (списокЁлементов—ƒочерними.Contains(идентификатор«аписи))
                {
                    if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.Ќе√рупповые)
                    {
                        node.Attributes.Add("Disable", "true");
                        node.Checkable = false;
                        node.CssClass = "Disabled";
                    }
                }
                else
                {
                    if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.√рупповые)
                    {
                        node.Attributes.Add("Disable", "true");
                        node.Checkable = false;
                        node.CssClass = "Disabled";
                    }
                }
            }
            else
            {
                if (запись.–ежим¬ыбора == –ежим¬ыбораЁлемента—правочника.¬ыбор«апрещен)
                {
                    node.Attributes.Add("Disable", "true");
                    node.Checkable = false;
                    node.CssClass = "Disabled";
                }
            }
        }
        
        protected void ƒерево_справочника_NodeExpand(object o, RadTreeNodeEventArgs e)
        {
            RadTreeNode expandedNode = e.NodeClicked;

            List<«апись—правочника> список = ѕолучить«начени€—правочника(expandedNode.Value);

            foreach («апись—правочника запись in список)
            {
                RadTreeNode node = new RadTreeNode();

                node.Text = запись.ѕолноеЌаименование«аписи;
                node.Value = запись. од;

                if (списокЁлементов—ƒочерними.Contains(запись.»дентификаторќбъекта))
                {
                    if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.Ќе√рупповые)
                    {
                        node.Attributes.Add("Disable", "true");
                        node.Checkable = false;
                        node.CssClass = "Disabled";
                    }

                    node.ExpandMode = ExpandMode.ServerSide;
                }
                else
                {
                    if (режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.«апрещено || режим¬ыбора«аписей == –ежимы¬ыбораЁлементов—правочника.√рупповые)
                    {
                        node.Attributes.Add("Disable", "true");
                        node.Checkable = false;
                        node.CssClass = "Disabled";
                    }

                    node.ExpandMode = ExpandMode.ClientSide;
                }

                expandedNode.Nodes.Add(node);
            }

            expandedNode.ExpandMode = ExpandMode.ClientSide;
            expandedNode.Expanded = true;
        }

        #endregion

        #region ћетоды

        private DataTable —оздать“аблицу()
        {
            DataTable table = new DataTable();

            DataColumn[] keys = new DataColumn[1];

            keys[0] = table.Columns.Add("»дентификаторќбъекта");
            table.Columns.Add(" од");
            table.Columns.Add("»дентификатор–одительской«аписи");
            table.Columns.Add("Ќаименование");

            table.PrimaryKey = keys;

            списокЁлементов—ƒочерними = new List<Guid>();

            Guid идентификатор–одител€ = Guid.Empty;

            foreach («апись—правочника запись in список«аписей)
            {
                try
                {
                    if (запись.»дентификатор–одительской«аписи != Guid.Empty && словарь«аписей—правочника.ContainsKey(запись.»дентификатор–одительской«аписи) )
                    {
                        идентификатор–одител€ = запись.»дентификатор–одительской«аписи;
                    }
                    else
                    {
                        идентификатор–одител€ = Guid.Empty;
                    }

                    table.Rows.Add(new object[] { запись.»дентификаторќбъекта, запись. од, идентификатор–одител€ == Guid.Empty ? (object)DBNull.Value : (object)идентификатор–одител€, запись.ѕолноеЌаименование«аписи });
                }
                catch (ConstraintException)
                {
                    #if DEBUG
                    throw;
                    #endif
                }

                if (идентификатор–одител€ != Guid.Empty && !списокЁлементов—ƒочерними.Contains(идентификатор–одител€))
                {
                    списокЁлементов—ƒочерними.Add(идентификатор–одител€);
                }
            }

            return table;
        }
        
        public List<«апись—правочника> ѕолучить«начени€—правочника(string  од–одительской«аписи)
        {
            List<«апись—правочника> результат = new List<«апись—правочника>();

            списокЁлементов—ƒочерними = new List<Guid>();

            foreach («апись—правочника запись in список«аписей)
            {
                if ((запись.–одительска€«апись != null) && !списокЁлементов—ƒочерними.Contains(запись.»дентификатор–одительской«аписи))
                {
                    списокЁлементов—ƒочерними.Add(запись.»дентификатор–одительской«аписи);
                }

                if (string.IsNullOrEmpty( од–одительской«аписи))
                {
                    if (запись.–одительска€«апись == null)
                    {
                        результат.Add(запись);
                    }
                    else if (!список«аписей.Contains(запись.–одительска€«апись))
                    {
                        результат.Add(запись);
                    }
                }
                else
                {
                    if ((запись.–одительска€«апись != null) && (запись. од–одительской«аписи ==  од–одительской«аписи))
                    {
                        результат.Add(запись);
                    }
                }
            }
            if (результат.Count > 0)
            {
                результат.Sort(—равнить«аписи—правочников);
            }

            return результат;
        }

        private static int —равнить«аписи—правочников(«апись—правочника x, «апись—правочника y)
        {
            //метод используетс€ дл€ сортировки записей справочника по коду

            if (x == null)
            {
                if (y == null)
                {
                    return 0;
                }
                else
                {
                    return -1;
                }

            }
            else
            {
                if (y == null)
                {
                    return 1;
                }
                else
                {
                    return x. од.CompareTo(y. од);   
                }
            }
        }

        protected ќтчетна€‘ормаƒанных ѕолучитьќтчетную‘орму()
        {
            if (this.ѕараметры.ѕараметр«адан("SessionParam"))
            {
                string[] strings = ѕараметры["SessionParam"].Split(':');

                if (strings.Length == 2)
                {
                    ќтчетна€‘ормаƒанных отчетна€‘орма = null;

                    object ќбъект—ессионнойѕеременной = Ѕарс.¬ебядро.ћенеджер—ессионныхѕеременных.ѕолучитьѕеременную»з—ессии(strings[0], strings[1]);

                    if (ќбъект—ессионнойѕеременной is —писок“екущихќтчетных‘орм)
                    {
                        try
                        {

                            if (this.ѕараметры.ѕараметр«адан("Index"))
                            {
                                int »ндексќбъекта¬—писке = -1;

                                if (int.TryParse(ѕараметры["Index"].ToString(), out »ндексќбъекта¬—писке))
                                {
                                    “екуща€ќтчетна€‘орма текуща€‘орма = (ќбъект—ессионнойѕеременной as —писок“екущихќтчетных‘орм)[»ндексќбъекта¬—писке];

                                    if (текуща€‘орма != null)
                                    {
                                        »дентификаторћетаописани€‘ормы идентификатор = текуща€‘орма.ѕолучить»дентификаторћетаописани€‘ормы();

                                        ’ранилищећетаописаний.ќбновитьЋокальноећетаописание(идентификатор);

                                        отчетна€‘орма = new ќтчетна€‘ормаƒанных();
                                        отчетна€‘орма.«агрузитьћетаструктуру(идентификатор);

                                        отчетна€‘орма. омпонентќтчетногоѕериода = текуща€‘орма. омпонентќтчетногоѕериода;
                                        отчетна€‘орма.”чреждение = текуща€‘орма.”чреждение;
                                        отчетна€‘орма.Ёлемент÷епочки = текуща€‘орма.Ёлемент÷епочки.“ипЁлемента÷епочки;

                                        ’ранилищеƒанных‘орм.ќбновитьЋокальныеƒанные(отчетна€‘орма.ƒанные.»дентификатор);

                                        отчетна€‘орма.«агрузитьƒанные();
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }
                    }
                    else if (ќбъект—ессионнойѕеременной is ќтчетна€‘ормаƒанных)
                    {
                        отчетна€‘орма = (ќтчетна€‘ормаƒанных)ќбъект—ессионнойѕеременной;
                    }

                    return отчетна€‘орма;
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }
        }

        #endregion

        #region ¬ыбор из справочников дл€ формы 110

        // ¬ приложении жестко прописана обработка дл€ справочника на форме 110
        // тк обрабатывать €васкрипт радовских окошек из dll'ки не представл€етс€
        // возможным, делаем следующим образом - в DictionaryInit провер€м €вл€етс€
        // ли текуща€ форма 110ой, если да то отключаем клиентский €васкрипт, который
        // возвращает значение в субтаблицу. «апоминаем выбор во вью стейт и после 
        // постбека от –ад“ри снова возвращаем €ва скрипт на место и формируем динамически скрипт
        // дл€ постобработки, и это значение возвращаем в субтаблицу
        //

        //дл€ обработки 110ой формы, см комменарии в соответсвующем регионе
        private enum “ип‘ормы
        {
            ќбычна€‘орма, ‘орма110, ‘орма111‘ќ
        }

        private “ип‘ормы ќсобенность“екущей‘ормы
        {
            get
            {
                return (“ип‘ормы)ViewState["‘110"];
            }
            set
            {
                ViewState.Add("‘110", value);
            }
        }
 
        private void ¬ыборќбъекта Ѕ ќт—чета‘ќ(ref object ќбъектƒл€¬ыбора«аписей,DateTime ƒатаЌачалаќтчетногоѕериода)
        {
            string полноеЌаименование = "";
            string условие‘ильтрации = "";

            if (ViewState["рез¬идƒе€т"] == null)
            {
                полноеЌаименование = "Ѕюджетна€ќтчетность.¬идыƒе€тельности";
                условие‘ильтрации = "[CODE] In ('1', '2')";
                tree.AutoPostBack = true;
                tree.BeforeClientDoubleClick = "";
            }
            else
            {

                полноеЌаименование = "Ѕюджетна€ќтчетность.ѕлан—четов";
                условие‘ильтрации = "[CODE] Like '211%' or [CODE] Like '212%' or [CODE] Like '308%' or [CODE] Like '309%' or [CODE] Like '40201%' or [CODE] Like '40202%'";
            }
            ќбъектƒл€¬ыбора«аписей = ѕолучить”ниверсальный—правочник(полноеЌаименование, условие‘ильтрации,ƒатаЌачалаќтчетногоѕериода);
        
        
        }

        private void ¬ыборќбъекта Ѕ ќт—чета(ref object ќбъектƒл€¬ыбора«аписей, DateTime ƒатаЌачалаќтчетногоѕериода)
        {

            string полноеЌаименование = "";
            string условие‘ильтрации = "";            
       
            if (ViewState["рез¬идƒе€т"] == null)
            {
                полноеЌаименование = "Ѕюджетна€ќтчетность.¬идыƒе€тельности" ;
                условие‘ильтрации = "[CODE] In ('1', '2')";
                tree.AutoPostBack = true;
                tree.BeforeClientDoubleClick = "";
            }
            else
            {

                полноеЌаименование = "Ѕюджетна€ќтчетность.ѕлан—четов";
                условие‘ильтрации = "[CODE] Like '30404%' or [CODE] Like '30405%' or [CODE] Like '21002%' or [CODE] Like '40101%' or [CODE] Like '40102%' or [CODE] Like '40201%' or [CODE] Like '40202%'";

            }
            ќбъектƒл€¬ыбора«аписей = ѕолучить”ниверсальный—правочник(полноеЌаименование,условие‘ильтрации,ƒатаЌачалаќтчетногоѕериода);
            
        }

        private ”ниверсальный—правочник ѕолучить”ниверсальный—правочник(string ѕолноеЌаименование, string ”словие‘ильтрации,DateTime ƒатајктуальности)
        {
            »дентификатор”ниверсального—правочника идентификатор—правочника = new »дентификатор”ниверсального—правочника();
            идентификатор—правочника.ѕолноеЌаименование—правочника = ѕолноеЌаименование;
            идентификатор—правочника.ƒатајктуальности = ƒатајктуальности;
            ”ниверсальный—правочник справочник = ”ниверсальный лассификатор.ѕолучить—правочникѕо»дентификатору(идентификатор—правочника, true);

            if (справочник == null)
            {
                this.Ўапка—траницы = "”казанный справочник не существует.";
                return null;
            }
            else
            {
                справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки("–одительскийЁлемент");
                справочник.«аписи.«апрос¬ыборки.ƒобавить”ровень—ортировки(" од");

                справочник.«аписи.«апрос¬ыборки.ƒополнительное”словиеќтбора = Ѕарс.‘ильтрЌа«аписи—правочника.ѕолучить”словие‘ильтрации(”словие‘ильтрации);

                справочник.«аписи.“ребуетс€ѕерезагрузка = true;
                справочник.«аписи.«агрузитьѕолностью();

                справочник.ѕостроить—ловарь«аписей();
                return справочник;
            }
        }

        void tree_NodeClick(object o, RadTreeNodeEventArgs e)
        {
 
            string value = e.NodeClicked.Value;
            ViewState.Add("рез¬идƒе€т", value);
            tree.AutoPostBack = false;

            tree.BeforeClientDoubleClick = "BeforeClientDoubleClickHandler";

            tree.BeforeClientDoubleClick = "FormatValue";
            StringBuilder строки = new StringBuilder();

            if (ќсобенность“екущей‘ормы == “ип‘ормы.‘орма110)
            {
                строки.Append("node.Value = FormatForF110(");
                строки.Append(value + ",");
            }
            else
                if (ќсобенность“екущей‘ормы == “ип‘ормы.‘орма111‘ќ)
                {
                    строки.Append("node.Value = FormatForF110FO(");
                    строки.Append(value + ",");
                }
            строки.Append("node.Value);");
            JSHolder.Text = строки.ToString();
        }
        #endregion

        protected void CallBack_Callback(object source, DevExpress.Web.ASPxCallback.CallbackEventArgs e)
        {
            if (!string.IsNullOrEmpty(e.Parameter))
            {
                ”становить«начениеячейки( Server.UrlDecode(e.Parameter) );
            }
        }

        private void ”становить«начениеячейки(string Ќаименование«аписи)
        {
            if (координаты.Length == 3)
            {
                for (int i = 0; i < список«аписей.Count; i++)
                {
                    «апись—правочника запись = («апись—правочника)список«аписей[i];
                    if (запись.ѕолноеЌаименование«аписи == Ќаименование«аписи)
                    {
                        ќтчетна€‘ормаƒанных форма = ѕолучитьќтчетную‘орму();
                        “аблицаƒанных таблицаƒанных = форма.ƒанные.“аблицы[координаты[0]];

                        код—толбца = координаты[1];
                        код—троки = координаты[2];

                        таблицаƒанных[код—троки, код—толбца].«начение = запись;
                        try
                        {
                            форма.ќбработать—обытие_ѕосле”становки«начени€ячейки—правочника(
                                new Ѕарс.—воды.јргументы—обытийќтчетной‘ормы.јргументыѕосле”становки«начени€ячейки(
                                таблицаƒанных, код—троки, код—толбца));
                        }
                        catch
                        {
                            //макрос посто€нно генерирует эксепшены и это "нормально"
                        }
                        break;
                    }
                }
            }
        }
    }
}
